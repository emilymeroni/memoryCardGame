window.memoryCardGame={},window.memoryCardGame.utils={},function(){"use strict";memoryCardGame.utils.persistInLocalStorage=function(data){localStorage.setItem("memoryCardGame",JSON.stringify(data))},memoryCardGame.utils.addDataInLocalStorage=function(data){var persistedData=memoryCardGame.utils.retrieveFromLocalStorage(),mergedData=$.extend({},persistedData,data);memoryCardGame.utils.persistInLocalStorage(mergedData)},memoryCardGame.utils.retrieveFromLocalStorage=function(){return JSON.parse(localStorage.getItem("memoryCardGame"))}}(),memoryCardGame.Deck=function(params){"use strict";var CONST={CSS:{ROOT:"memory-cards",SINGLE_CARD_CLASS:"memory-card"},CARD_COPIES:2,TIME_FOR_FLIP:500,DEFAULT_IMAGES:["Hydrangeas.jpg","Jellyfish.jpg","Koala.jpg","Penguins.jpg","Tulips.jpg"],IMAGE_BASE_URL:"src\\images"},config={gameManager:null,cardsClass:CONST.CSS.CARDS_CLASS,singleCardClass:CONST.CSS.SINGLE_CARD_CLASS};$.extend(config,params);var cards=[],flippedCards=[],imageMap=[];this.container=$("<ul></ul>").addClass(config.cardsClass);var self=this,init=function(){imageMap=imageMap.concat(CONST.DEFAULT_IMAGES),createCards(),shuffleCards(),drawCards()},createCards=function(){for(var i=0;i<imageMap.length;i++)for(var j=0;j<CONST.CARD_COPIES;j++){var card=new memoryCardGame.Card({id:cards.length,image:CONST.IMAGE_BASE_URL+"\\"+imageMap[i],gameManager:config.gameManager});cards.push(card)}},shuffleCards=function(){cards=cards.sort(function(){return.5-Math.random()})},drawCards=function(){for(var i=0;i<cards.length;i++){var cardNode=cards[i].getNode();self.container.append(cardNode)}};this.getPreviousFlippedCard=function(){return flippedCards[flippedCards.length-2]},this.addFlippedCard=function(card){return flippedCards.push(card)},this.isNewHandStarted=function(){return self.getFlippedCardsNumber()%CONST.CARD_COPIES===1},this.isHandFinished=function(){return self.getFlippedCardsNumber()%CONST.CARD_COPIES===0},this.isAllCardsFlipped=function(){return self.getFlippedCardsNumber()===self.getCardsNumber()},this.setDiscoveredCards=function(){for(var i=1;i<=CONST.CARD_COPIES;i++)flippedCards[flippedCards.length-i].setDiscovered()},this.getFlippedCardsNumber=function(){return flippedCards.length},this.getCardsNumber=function(){return cards.length},this.coverLatestHandFlippedCards=function(){setTimeout(function(){for(var i=0;i<CONST.CARD_COPIES;i++)flippedCards[self.getFlippedCardsNumber()-1].getCardNodeAndFlip(),flippedCards.pop()},CONST.TIME_FOR_FLIP)},init.call(this)},memoryCardGame.Card=function(params){"use strict";var CONST={CSS:{SINGLE_CARD_CLASS:"memory-card"},DATA:{CARD_ID:"data-card-id"},HTML:{CARD_NODE:"<li></li>",IMAGE_NODE:"<img>"}},config={id:null,flipped:!1,image:null,gameManager:null};$.extend(config,params);var discovered=!1,imageNode=$(CONST.HTML.IMAGE_NODE),self=this,flip=function(cardNode){config.flipped=!config.flipped,config.flipped===!0?cardNode.append(getImageNode()):cardNode.find(imageNode).remove()};this.getCardNodeAndFlip=function(){var cardNode=$("."+CONST.CSS.SINGLE_CARD_CLASS+"["+CONST.DATA.CARD_ID+"="+config.id+"]");flip(cardNode)},this.getImage=function(){return config.image};var getImageNode=function(){return imageNode.attr("src",config.image),imageNode};this.getNode=function(){var cardNode=$(CONST.HTML.CARD_NODE);return cardNode.addClass(CONST.CSS.SINGLE_CARD_CLASS).attr(CONST.DATA.CARD_ID,config.id),cardNode.click(function(){config.flipped===!1&&(flip(cardNode),discovered===!1&&config.gameManager.onCardSelected(self))}),cardNode},this.setDiscovered=function(){discovered=!0}},memoryCardGame.Stats=function(params){"use strict";var CONST={CSS:{ROOT:"current-stats-container",BEST_SCORE:"best-score",BEST_SCORE_TEXT:"best-score-text",BEST_SCORE_NUMBER:"best-score-number",ATTEMPTS:"attempts",ATTEMPTS_TEXT:"attempts-text",ATTEMPTS_NUMBER:"attempts-number"},SELECTOR:{ATTEMPTS_NUMBER:".attempts-number"},TEXT:{ATTEMPTS:"Attempts: ",BEST_SCORE:"Best score: "}},config={bestScoreCounter:null,attempts:0};$.extend(config,params),this.container=$("<div></div>").addClass(CONST.CSS.ROOT);var self=this,init=function(){draw()},draw=function(){var currentMoves=$("<div></div>").addClass(CONST.CSS.ATTEMPTS),attemptsText=$("<span></span>").addClass(CONST.CSS.ATTEMPTS_TEXT).text(CONST.TEXT.ATTEMPTS),attemptsNumber=$("<span></span>").addClass(CONST.CSS.ATTEMPTS_NUMBER).text(config.attempts);if(currentMoves.append(attemptsText),currentMoves.append(attemptsNumber),self.container.append(currentMoves),null!==config.bestScoreCounter){var bestScore=$("<div></div>").addClass(CONST.CSS.BEST_SCORE),bestScoreText=$("<span></span>").addClass(CONST.CSS.BEST_SCORE_TEXT).text(CONST.TEXT.BEST_SCORE),bestScoreNumber=$("<span></span>").addClass(CONST.CSS.BEST_SCORE_NUMBER).text(config.bestScoreCounter);bestScore.append(bestScoreText),bestScore.append(bestScoreNumber),self.container.append(bestScore)}};this.updateAttemptsCounter=function(){config.attempts++,$(CONST.SELECTOR.ATTEMPTS_NUMBER).text(config.attempts)},this.saveStats=function(){(null===config.bestScoreCounter||config.attempts<config.bestScoreCounter)&&memoryCardGame.utils.addDataInLocalStorage({bestScoreCounter:config.attempts})},init.call(this)},memoryCardGame.GameManager=function(params){"use strict";var CONST={CSS:{ROOT:"memory-card-game",BOARD_CLASS:"memory-board"}},config={cardsClass:CONST.CSS.CARDS_CLASS,gameClass:CONST.CSS.ROOT,singleCardClass:CONST.CSS.SINGLE_CARD_CLASS};$.extend(config,params);var deck,stats,timer=0,persistentData={bestScoreCounter:null};this.container=$("<div></div>").addClass(config.gameClass);var self=this,init=function(){var memoryLocalStorage=memoryCardGame.utils.retrieveFromLocalStorage();null!==memoryLocalStorage&&(persistentData=memoryLocalStorage),stats=new memoryCardGame.Stats({bestScoreCounter:persistentData.bestScoreCounter}),self.container.append(stats.container),deck=new memoryCardGame.Deck({gameManager:self,cardsClass:config.cardsClass,singleCardClass:config.singleCardClass}),self.container.append(deck.container),$("body").append(self.container),startTimer()},endGame=function(){stats.saveStats()},startTimer=function(){setInterval(function(){timer++},1e3)},isGameEnded=function(){return deck.isAllCardsFlipped()};this.onCardSelected=function(card){deck.addFlippedCard(card),deck.isNewHandStarted()||(deck.getPreviousFlippedCard().getImage()===card.getImage()?deck.isHandFinished()&&(deck.setDiscoveredCards(),stats.updateAttemptsCounter(),isGameEnded()===!0&&endGame()):(deck.coverLatestHandFlippedCards(),stats.updateAttemptsCounter()))},init.call(this)},memoryCardGame.UserOptions=function(params){"use strict";var CONST={CSS:{USER_OPTIONS_WRAPPER:"user-options-wrapper",OPTION_PANEL_CLASS:"user-options-panel"},TEXT:{PICTURE_NUMBER:"Number of pictures:",USER_OPTION_PANEL:"User option panel",CLOSE:"Close"}},config={cardCopies:null};$.extend(config,params);var self=this;self.container=$("<div></div>").addClass(CONST.CSS.USER_OPTIONS_WRAPPER);var init=function(){draw()},draw=function(){var userOptionsPanel=$("<div></div>").addClass(CONST.CSS.OPTION_PANEL_CLASS);drawHeader(userOptionsPanel),drawOptionsForm(userOptionsPanel),drawFooter(userOptionsPanel),self.container.append(userOptionsPanel),$("body").append(self.container)},drawHeader=function(rootNode){var userOptionsTitle=$("<h2></h2>").text(CONST.TEXT.USER_OPTION_PANEL);rootNode.append(userOptionsTitle)},drawOptionsForm=function(rootNode){var howManyPicturesLabel=$("<label></label>").text(CONST.TEXT.PICTURE_NUMBER),howManyPictures=$('<input type="text">');howManyPicturesLabel.append(howManyPictures),rootNode.append(howManyPicturesLabel)},drawFooter=function(rootNode){var closeButton=$("<button></button>").text(CONST.TEXT.CLOSE);closeButton.click(function(){self.container.hide(),new memoryCardGame.GameManager}),rootNode.append(closeButton)};init.call(this)};
//# sourceMappingURL=memoryCardGame.min.js.map
