{"version":3,"sources":["core.js","utils.js","Deck.js","Card.js","Stats.js","GameManager.js","UserOptions.js"],"names":["window","memoryCardGame","extend","baseFunc","func","args","apply","Notifier","CONST","PREFIX","ERROR_MESSAGES","NOTIFIER_ABSTRACT","INVALID_OBSERVER","REQUIRED_DATA","INVALID_DATA","this","constructor","observers","prefix","suffix","generateMethodName","eventName","str","charAt","toUpperCase","substring","addObserver","observer","jQuery","type","push","notifyObservers","data","method","i","length","isFunction","removeObserver","splice","utils","persistInLocalStorage","localStorage","setItem","JSON","stringify","addDataInLocalStorage","persistedData","retrieveFromLocalStorage","mergedData","$","parse","getItem","Deck","params","CSS","ROOT","SINGLE_CARD_CLASS","CARD_COPIES","TIME_FOR_FLIP","DEFAULT_IMAGES","IMAGE_BASE_URL","EVENT","HAND_FINISHED","HAND_INVALID","CARDS_ALL_FLIPPED","config","cardsClass","CARDS_CLASS","singleCardClass","cards","flippedCards","imageMap","container","addClass","self","init","concat","createCards","shuffleCards","drawCards","j","card","Card","id","image","sort","Math","random","cardNode","getNode","append","getPreviousFlippedCard","isNewHandStarted","getFlippedCardsNumber","isHandFinished","isAllCardsFlipped","getCardsNumber","setDiscoveredCards","setDiscovered","coverLatestHandFlippedCards","setTimeout","getCardNodeAndFlip","pop","onSelectedCardHandler","getImage","call","DATA","CARD_ID","HTML","CARD_NODE","IMAGE_NODE","SELECTED_CARD","flipped","discovered","imageNode","flip","getImageNode","find","remove","attr","click","Stats","BEST_SCORE","BEST_SCORE_TEXT","BEST_SCORE_NUMBER","ATTEMPTS","ATTEMPTS_TEXT","ATTEMPTS_NUMBER","SELECTOR","TEXT","bestScoreCounter","attempts","draw","currentMoves","attemptsText","text","attemptsNumber","bestScore","bestScoreText","bestScoreNumber","updateAttemptsCounter","saveStats","GameManager","BOARD_CLASS","TIMER_CLASS","TIMER_SELECTOR","TIMER","gameClass","deck","stats","timerInterval","timer","persistentData","memoryLocalStorage","startTimer","endGame","clearInterval","setInterval","onHandFinishedHandler","onHandInvalidHandler","onCardsAllFlippedHandler","UserOptions","USER_OPTIONS_WRAPPER","OPTION_PANEL_CLASS","PICTURE_NUMBER","USER_OPTION_PANEL","CLOSE","cardCopies","userOptionsPanel","drawHeader","drawOptionsForm","drawFooter","rootNode","userOptionsTitle","howManyPicturesLabel","howManyPictures","closeButton","hide"],"mappings":"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","file":"memoryCardGame.min.js","sourcesContent":["/* global $, jQuery, memoryCardGame */\r\n\r\nwindow.memoryCardGame = {};\r\n\r\n(function() {\r\n    'use strict';\r\n\r\n    /**\r\n     * Offers a simple solution for inheritance among classes\r\n     *\r\n     * @param {function} baseFunc  Parent constructor function. Required\r\n     * @param {function} func      Child constructor function. Required\r\n     * @param {array}    args      An array of arguments that will be passed to the parent's constructor. Optional\r\n     * @copyright 2015 Massimo Foti lugajs\r\n     * @link https://lugajs.org\r\n     */\r\n    memoryCardGame.extend = function (baseFunc, func, args) {\r\n        baseFunc.apply(func, args);\r\n    };\r\n\r\n    /**\r\n     * Provides the base functionality necessary to maintain a list of observers and send notifications to them.\r\n     * It's forbidden to use this class directly, it can only be used as a base class.\r\n     * The Notifier class does not define any notification messages, so it is up to the developer to define the notifications sent via the Notifier.\r\n     * @copyright 2015 Massimo Foti lugajs\r\n     * @link https://lugajs.org\r\n     * @throws\r\n     */\r\n    memoryCardGame.Notifier = function () {\r\n\r\n        var CONST = {\r\n            PREFIX: 'handle',\r\n            ERROR_MESSAGES: {\r\n                NOTIFIER_ABSTRACT: \"It's forbidden to use luga.Notifier directly, it must be used as a base class instead\",\r\n                INVALID_OBSERVER: 'addObserver(): observer parameter must be an object',\r\n                REQUIRED_DATA: 'notifyObserver(): data parameter is required',\r\n                INVALID_DATA: 'notifyObserver(): data parameter must be an object'\r\n            }\r\n        };\r\n\r\n        if (this.constructor === memoryCardGame.Notifier) {\r\n            throw(CONST.ERROR_MESSAGES.NOTIFIER_ABSTRACT);\r\n        }\r\n        this.observers = [];\r\n        var prefix = \"on\";\r\n        var suffix = \"Handler\";\r\n\r\n        // Turns \"complete\" into \"onComplete\"\r\n        var generateMethodName = function (eventName) {\r\n            var str = prefix;\r\n            str += eventName.charAt(0).toUpperCase();\r\n            str += eventName.substring(1);\r\n            str += suffix;\r\n            return str;\r\n        };\r\n\r\n        /**\r\n         * Adds an observer object to the list of observers.\r\n         * Observer objects should implement a method that matches a naming convention for the events they are interested in.\r\n         * For an event named \"complete\" they must implement a method named: \"onCompleteHandler\"\r\n         * The interface for this methods is as follows:\r\n         * observer.onCompleteHandler = function(data){};\r\n         * @param  {object} observer  Observer object\r\n         * @throws\r\n         */\r\n        this.addObserver = function (observer) {\r\n            if (jQuery.type(observer) !== \"object\") {\r\n                throw(CONST.ERROR_MESSAGES.INVALID_OBSERVER);\r\n            }\r\n            this.observers.push(observer);\r\n        };\r\n\r\n        /**\r\n         * Sends a notification to all interested observers registered with the notifier.\r\n         *\r\n         * @method\r\n         * @param {string}  eventName  Name of the event\r\n         * @param {object}  data       Object containing data to be passed from the point of notification to all interested observers.\r\n         *                             If there is no relevant data to pass, use an empty object.\r\n         * @throws\r\n         */\r\n        this.notifyObservers = function (eventName, data) {\r\n            if (jQuery.type(data) !== \"object\") {\r\n                throw(CONST.ERROR_MESSAGES.INVALID_DATA);\r\n            }\r\n            var method = generateMethodName(eventName);\r\n            for (var i = 0; i < this.observers.length; i++) {\r\n                var observer = this.observers[i];\r\n                if (observer[method] && jQuery.isFunction(observer[method])) {\r\n                    observer[method](data);\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Removes the given observer object.\r\n         *\r\n         * @method\r\n         * @param {Object} observer\r\n         */\r\n        this.removeObserver = function (observer) {\r\n            for (var i = 0; i < this.observers.length; i++) {\r\n                if (this.observers[i] === observer) {\r\n                    this.observers.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n\r\n    };\r\n}());","/* global $, memoryCardGame */\r\n\r\nwindow.memoryCardGame.utils = {};\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    memoryCardGame.utils.persistInLocalStorage = function (data) {\r\n        localStorage.setItem('memoryCardGame', JSON.stringify(data));\r\n    };\r\n\r\n    memoryCardGame.utils.addDataInLocalStorage = function (data) {\r\n        var persistedData = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        var mergedData = $.extend({}, persistedData, data);\r\n        memoryCardGame.utils.persistInLocalStorage(mergedData);\r\n    };\r\n\r\n        memoryCardGame.utils.retrieveFromLocalStorage = function () {\r\n        return JSON.parse(localStorage.getItem('memoryCardGame'));\r\n    };\r\n})();\r\n","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.Deck = function(params){\r\n\r\n    'use strict';\r\n\r\n    memoryCardGame.extend(memoryCardGame.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-cards',\r\n            SINGLE_CARD_CLASS: 'memory-card'\r\n        },\r\n        CARD_COPIES: 2,\r\n        TIME_FOR_FLIP: 500,\r\n        DEFAULT_IMAGES: [\r\n            'Hydrangeas.jpg',\r\n            'Jellyfish.jpg',\r\n            'Koala.jpg',\r\n            'Penguins.jpg',\r\n            'Tulips.jpg'\r\n        ],\r\n        IMAGE_BASE_URL: 'src\\\\images',\r\n        EVENT: {\r\n            HAND_FINISHED: 'handFinished',\r\n            HAND_INVALID: 'handInvalid',\r\n            CARDS_ALL_FLIPPED: 'cardsAllFlipped'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        cardsClass: CONST.CSS.CARDS_CLASS,\r\n        singleCardClass: CONST.CSS.SINGLE_CARD_CLASS\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var cards = [];\r\n\r\n    var flippedCards = [];\r\n\r\n    var imageMap = [];\r\n\r\n    this.container = $('<ul></ul>').addClass(config.cardsClass);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        imageMap = imageMap.concat(CONST.DEFAULT_IMAGES);\r\n        createCards();\r\n        shuffleCards();\r\n        drawCards();\r\n    };\r\n\r\n    var createCards = function() {\r\n        for (var i = 0; i < imageMap.length; i++) {\r\n            for (var j = 0; j < CONST.CARD_COPIES; j++) {\r\n                var card = new memoryCardGame.Card({\r\n                    id: cards.length,\r\n                    image: CONST.IMAGE_BASE_URL + '\\\\' + imageMap[i]\r\n                });\r\n                card.addObserver(self);\r\n                cards.push(card);\r\n            }\r\n        }\r\n    };\r\n\r\n    var shuffleCards = function () {\r\n        cards = cards.sort(function () {\r\n            return 0.5 - Math.random();\r\n        });\r\n    };\r\n\r\n    var drawCards = function () {\r\n        for (var i = 0; i < cards.length; i++) {\r\n            var cardNode = cards[i].getNode();\r\n            self.container.append(cardNode);\r\n        }\r\n    };\r\n\r\n    var getPreviousFlippedCard = function()  {\r\n        return flippedCards[flippedCards.length - 2];\r\n    };\r\n\r\n    var isNewHandStarted = function () {\r\n        return getFlippedCardsNumber() % CONST.CARD_COPIES === 1;\r\n    };\r\n\r\n    var isHandFinished = function () {\r\n        return getFlippedCardsNumber() % CONST.CARD_COPIES === 0;\r\n    };\r\n\r\n    var isAllCardsFlipped = function () {\r\n        return getFlippedCardsNumber() === getCardsNumber();\r\n    };\r\n\r\n    var setDiscoveredCards = function () {\r\n        for (var i = 1; i <= CONST.CARD_COPIES; i++) {\r\n            flippedCards[flippedCards.length - i].setDiscovered();\r\n        }\r\n    };\r\n\r\n    var getFlippedCardsNumber = function () {\r\n        return flippedCards.length;\r\n    };\r\n\r\n    var getCardsNumber = function() {\r\n        return cards.length;\r\n    };\r\n\r\n    var coverLatestHandFlippedCards = function () {\r\n        setTimeout(function () {\r\n            for (var i = 0; i < CONST.CARD_COPIES; i++) {\r\n                flippedCards[getFlippedCardsNumber() - 1].getCardNodeAndFlip();\r\n                flippedCards.pop();\r\n            }\r\n        }, CONST.TIME_FOR_FLIP);\r\n    };\r\n\r\n    this.onSelectedCardHandler = function(data) {\r\n        var card = data.card;\r\n        flippedCards.push(card);\r\n        if (isNewHandStarted()) {\r\n            return;\r\n        }\r\n        if (getPreviousFlippedCard().getImage() === card.getImage()) {\r\n            if (isHandFinished()) {\r\n                setDiscoveredCards();\r\n                self.notifyObservers(CONST.EVENT.HAND_FINISHED, {});\r\n                if (isAllCardsFlipped()) {\r\n                    self.notifyObservers(CONST.EVENT.CARDS_ALL_FLIPPED, {});\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            coverLatestHandFlippedCards();\r\n            self.notifyObservers(CONST.EVENT.HAND_INVALID, {});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n\r\n};\r\n\r\n","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.Card = function (params) {\r\n    'use strict';\r\n\r\n    memoryCardGame.extend(memoryCardGame.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            SINGLE_CARD_CLASS: 'memory-card'\r\n        },\r\n        DATA: {\r\n            CARD_ID: 'data-card-id'\r\n        },\r\n        HTML: {\r\n            CARD_NODE: '<li></li>',\r\n            IMAGE_NODE: '<img>'\r\n        },\r\n        EVENT: {\r\n            SELECTED_CARD: 'selectedCard'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        id: null,\r\n        flipped: false,\r\n        image: null\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var discovered = false;\r\n\r\n    var imageNode = $(CONST.HTML.IMAGE_NODE);\r\n\r\n    var self = this;\r\n\r\n    var flip = function (cardNode) {\r\n        config.flipped = !config.flipped;\r\n\r\n        if (config.flipped === true) {\r\n            cardNode.append(getImageNode());\r\n        }\r\n        else {\r\n            cardNode.find(imageNode).remove();\r\n        }\r\n    };\r\n\r\n    this.getCardNodeAndFlip = function () {\r\n        var cardNode = $('.' + CONST.CSS.SINGLE_CARD_CLASS + '[' + CONST.DATA.CARD_ID + '=' + config.id + ']');\r\n        flip(cardNode);\r\n    };\r\n\r\n    this.getImage = function () {\r\n        return config.image;\r\n    };\r\n\r\n    var getImageNode = function () {\r\n        imageNode.attr('src', config.image);\r\n        return imageNode;\r\n    };\r\n\r\n    this.getNode = function () {\r\n        var cardNode = $(CONST.HTML.CARD_NODE);\r\n        cardNode.addClass(CONST.CSS.SINGLE_CARD_CLASS).attr(CONST.DATA.CARD_ID, config.id);\r\n        cardNode.click(function () {\r\n            if (config.flipped === false) {\r\n                flip(cardNode);\r\n                if (discovered === false) {\r\n                    self.notifyObservers(CONST.EVENT.SELECTED_CARD, {\r\n                        card: self\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        return cardNode;\r\n    };\r\n\r\n    this.setDiscovered = function () {\r\n        discovered = true;\r\n    };\r\n};\r\n\r\n","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.Stats = function(params){\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'current-stats-container',\r\n            BEST_SCORE: 'best-score',\r\n            BEST_SCORE_TEXT: 'best-score-text',\r\n            BEST_SCORE_NUMBER: 'best-score-number',\r\n            ATTEMPTS: 'attempts',\r\n            ATTEMPTS_TEXT: 'attempts-text',\r\n            ATTEMPTS_NUMBER: 'attempts-number'\r\n        },\r\n        SELECTOR: {\r\n            ATTEMPTS_NUMBER: '.attempts-number'\r\n        },\r\n        TEXT: {\r\n            ATTEMPTS: 'Attempts: ',\r\n            BEST_SCORE: 'Best score: '\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        bestScoreCounter: null,\r\n        attempts: 0\r\n\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    this.container = $('<div></div>').addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        draw();\r\n    };\r\n\r\n    var draw = function () {\r\n\r\n        var currentMoves = $('<div></div>').addClass(CONST.CSS.ATTEMPTS);\r\n        var attemptsText = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_TEXT).text(CONST.TEXT.ATTEMPTS);\r\n        var attemptsNumber = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_NUMBER).text(config.attempts);\r\n\r\n        currentMoves.append(attemptsText);\r\n        currentMoves.append(attemptsNumber);\r\n\r\n        self.container.append(currentMoves);\r\n\r\n        if (config.bestScoreCounter !== null) {\r\n            var bestScore = $('<div></div>').addClass(CONST.CSS.BEST_SCORE);\r\n            var bestScoreText = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_TEXT).text(CONST.TEXT.BEST_SCORE);\r\n            var bestScoreNumber = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_NUMBER).text(config.bestScoreCounter);\r\n\r\n            bestScore.append(bestScoreText);\r\n            bestScore.append(bestScoreNumber);\r\n            self.container.append(bestScore);\r\n        }\r\n    };\r\n\r\n    this.updateAttemptsCounter = function() {\r\n        config.attempts++;\r\n        $(CONST.SELECTOR.ATTEMPTS_NUMBER).text(config.attempts);\r\n    };\r\n\r\n    this.saveStats = function() {\r\n        if ((config.bestScoreCounter === null || config.attempts < config.bestScoreCounter)) {\r\n            memoryCardGame.utils.addDataInLocalStorage({bestScoreCounter: config.attempts});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n};\r\n\r\n","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.GameManager = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-card-game',\r\n            BOARD_CLASS: 'memory-board',\r\n            TIMER_CLASS: 'timer'\r\n        },\r\n        SELECTOR: {\r\n          TIMER_SELECTOR: '.timer'\r\n        },\r\n        TIMER: 1000\r\n    };\r\n\r\n    var config = {\r\n        cardsClass: CONST.CSS.CARDS_CLASS,\r\n        gameClass: CONST.CSS.ROOT,\r\n        singleCardClass: CONST.CSS.SINGLE_CARD_CLASS\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var deck;\r\n\r\n    var stats;\r\n\r\n    var timer = 0;\r\n\r\n    var timerInterval;\r\n\r\n    var persistentData = {\r\n        bestScoreCounter: null\r\n    };\r\n\r\n    this.container = $('<div></div>').addClass(config.gameClass);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        var memoryLocalStorage = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        if (memoryLocalStorage !== null) {\r\n            persistentData = memoryLocalStorage;\r\n        }\r\n\r\n        stats = new memoryCardGame.Stats({\r\n            bestScoreCounter: persistentData.bestScoreCounter\r\n        });\r\n        self.container.append(stats.container);\r\n\r\n        deck = new memoryCardGame.Deck({\r\n            cardsClass: config.cardsClass,\r\n            singleCardClass: config.singleCardClass\r\n        });\r\n\r\n        deck.addObserver(self);\r\n        self.container.append(deck.container);\r\n\r\n        self.container.append($('<div></div>').addClass(CONST.CSS.TIMER_CLASS));\r\n\r\n        $('body').append(self.container);\r\n        startTimer();\r\n    };\r\n\r\n    var endGame = function () {\r\n        stats.saveStats();\r\n        clearInterval(timerInterval);\r\n    };\r\n\r\n    var startTimer = function () {\r\n        timerInterval = setInterval(function () {\r\n            $(CONST.SELECTOR.TIMER_SELECTOR).text(timer++);\r\n        }, CONST.TIMER);\r\n    };\r\n\r\n    this.onHandFinishedHandler = function() {\r\n        stats.updateAttemptsCounter();\r\n    };\r\n\r\n    this.onHandInvalidHandler = function() {\r\n        stats.updateAttemptsCounter();\r\n    };\r\n\r\n    this.onCardsAllFlippedHandler = function() {\r\n        endGame();\r\n    };\r\n\r\n    init.call(this);\r\n};","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.UserOptions = function(params){\r\n\r\n\t'use strict';\r\n\r\n\tvar CONST = {\r\n\t\tCSS: {\r\n\t\t\tUSER_OPTIONS_WRAPPER: 'user-options-wrapper',\r\n\t\t\tOPTION_PANEL_CLASS: 'user-options-panel'\r\n\t\t},\r\n\t\tTEXT: {\r\n\t\t\tPICTURE_NUMBER: 'Number of pictures:',\r\n\t\t\tUSER_OPTION_PANEL: 'User option panel',\r\n\t\t\tCLOSE: 'Close'\r\n\t\t}\r\n\t};\r\n\r\n\tvar config = {\r\n\t\tcardCopies: null\r\n\t};\r\n\r\n\t// Merge incoming params with internal config\r\n\t$.extend(config, params);\r\n\r\n\tvar self = this;\r\n\r\n\tself.container = $('<div></div>').addClass(CONST.CSS.USER_OPTIONS_WRAPPER);\r\n\r\n\tvar init = function () {\r\n\t\tdraw();\r\n\t};\r\n\r\n\tvar draw = function() {\r\n\t\t//TODO: Create utils library for dom elements\r\n\t\tvar userOptionsPanel = $('<div></div>').addClass(CONST.CSS.OPTION_PANEL_CLASS);\r\n\t\tdrawHeader(userOptionsPanel);\r\n\t\tdrawOptionsForm(userOptionsPanel);\r\n\t\tdrawFooter(userOptionsPanel);\r\n\t\tself.container.append(userOptionsPanel);\r\n\t\t//TODO: Create a global class for memoryGame and append panel to it\r\n\t\t$('body').append(self.container);\r\n\t};\r\n\r\n\tvar drawHeader = function(rootNode) {\r\n\t\tvar userOptionsTitle = $('<h2></h2>').text(CONST.TEXT.USER_OPTION_PANEL);\r\n\t\trootNode.append(userOptionsTitle);\r\n\t};\r\n\r\n\tvar drawOptionsForm = function(rootNode) {\r\n\t\tvar howManyPicturesLabel = $('<label></label>').text(CONST.TEXT.PICTURE_NUMBER);\r\n\t\tvar howManyPictures = $('<input type=\"text\">');\r\n\t\thowManyPicturesLabel.append(howManyPictures);\r\n\t\trootNode.append(howManyPicturesLabel);\r\n\t};\r\n\r\n\tvar drawFooter = function(rootNode) {\r\n\t\tvar closeButton = $('<button></button>').text(CONST.TEXT.CLOSE);\r\n\t\tcloseButton.click(function(){\r\n\t\t\tself.container.hide();\r\n\t\t\tnew memoryCardGame.GameManager();\r\n\t\t});\r\n\t\trootNode.append(closeButton);\r\n\t};\r\n\r\n\tinit.call(this);\r\n\r\n};\r\n\r\n"],"sourceRoot":"."}