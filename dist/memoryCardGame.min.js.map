{"version":3,"sources":["core.js","utils.js","Deck.js","Card.js","Stats.js","GameManager.js","UserOptions.js"],"names":["window","memoryCardGame","utils","persistInLocalStorage","data","localStorage","setItem","JSON","stringify","addDataInLocalStorage","persistedData","retrieveFromLocalStorage","mergedData","$","extend","parse","getItem","Deck","params","luga","Notifier","this","CONST","CSS","ROOT","SINGLE_CARD_CLASS","CARD_COPIES","TIME_FOR_FLIP","DEFAULT_IMAGES","IMAGE_BASE_URL","EVENT","HAND_FINISHED","HAND_INVALID","CARDS_ALL_FLIPPED","config","cardsClass","CARDS_CLASS","singleCardClass","cards","flippedCards","imageMap","container","addClass","self","init","concat","createCards","shuffleCards","drawCards","i","length","j","card","Card","id","image","addObserver","push","sort","Math","random","cardNode","getNode","append","getPreviousFlippedCard","isNewHandStarted","getFlippedCardsNumber","isHandFinished","isAllCardsFlipped","getCardsNumber","setDiscoveredCards","setDiscovered","coverLatestHandFlippedCards","setTimeout","getCardNodeAndFlip","pop","onSelectedCardHandler","getImage","notifyObservers","call","DATA","CARD_ID","HTML","CARD_NODE","IMAGE_NODE","SELECTED_CARD","flipped","discovered","imageNode","flip","getImageNode","find","remove","attr","click","Stats","BEST_SCORE","BEST_SCORE_TEXT","BEST_SCORE_NUMBER","ATTEMPTS","ATTEMPTS_TEXT","ATTEMPTS_NUMBER","SELECTOR","TEXT","bestScoreCounter","attempts","draw","currentMoves","attemptsText","text","attemptsNumber","bestScore","bestScoreText","bestScoreNumber","updateAttemptsCounter","saveStats","GameManager","BOARD_CLASS","TIMER_CLASS","TIMER_SELECTOR","TIMER","gameClass","deck","stats","timerInterval","timer","persistentData","memoryLocalStorage","startTimer","endGame","clearInterval","setInterval","onHandFinishedHandler","onHandInvalidHandler","onCardsAllFlippedHandler","UserOptions","USER_OPTIONS_WRAPPER","OPTION_PANEL_CLASS","PICTURE_NUMBER","USER_OPTION_PANEL","CLOSE","cardCopies","userOptionsPanel","drawHeader","drawOptionsForm","drawFooter","rootNode","userOptionsTitle","howManyPicturesLabel","howManyPictures","closeButton","hide"],"mappings":"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","file":"memoryCardGame.min.js","sourcesContent":["window.memoryCardGame = {};","/* global $, memoryCardGame */\r\n\r\nwindow.memoryCardGame.utils = {};\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    memoryCardGame.utils.persistInLocalStorage = function (data) {\r\n        localStorage.setItem('memoryCardGame', JSON.stringify(data));\r\n    };\r\n\r\n    memoryCardGame.utils.addDataInLocalStorage = function (data) {\r\n        var persistedData = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        var mergedData = $.extend({}, persistedData, data);\r\n        memoryCardGame.utils.persistInLocalStorage(mergedData);\r\n    };\r\n\r\n        memoryCardGame.utils.retrieveFromLocalStorage = function () {\r\n        return JSON.parse(localStorage.getItem('memoryCardGame'));\r\n    };\r\n})();\r\n","/* global $, memoryCardGame, luga */\r\n\r\nmemoryCardGame.Deck = function(params){\r\n\r\n    'use strict';\r\n\r\n    luga.extend(luga.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-cards',\r\n            SINGLE_CARD_CLASS: 'memory-card'\r\n        },\r\n        CARD_COPIES: 2,\r\n        TIME_FOR_FLIP: 500,\r\n        DEFAULT_IMAGES: [\r\n            'Hydrangeas.jpg',\r\n            'Jellyfish.jpg',\r\n            'Koala.jpg',\r\n            'Penguins.jpg',\r\n            'Tulips.jpg'\r\n        ],\r\n        IMAGE_BASE_URL: 'src\\\\images',\r\n        EVENT: {\r\n            HAND_FINISHED: 'handFinished',\r\n            HAND_INVALID: 'handInvalid',\r\n            CARDS_ALL_FLIPPED: 'cardsAllFlipped'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        cardsClass: CONST.CSS.CARDS_CLASS,\r\n        singleCardClass: CONST.CSS.SINGLE_CARD_CLASS\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var cards = [];\r\n\r\n    var flippedCards = [];\r\n\r\n    var imageMap = [];\r\n\r\n    this.container = $('<ul></ul>').addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        imageMap = imageMap.concat(CONST.DEFAULT_IMAGES);\r\n        createCards();\r\n        shuffleCards();\r\n        drawCards();\r\n    };\r\n\r\n    var createCards = function() {\r\n        for (var i = 0; i < imageMap.length; i++) {\r\n            for (var j = 0; j < CONST.CARD_COPIES; j++) {\r\n                var card = new memoryCardGame.Card({\r\n                    id: cards.length,\r\n                    image: CONST.IMAGE_BASE_URL + '\\\\' + imageMap[i]\r\n                });\r\n                card.addObserver(self);\r\n                cards.push(card);\r\n            }\r\n        }\r\n    };\r\n\r\n    var shuffleCards = function () {\r\n        cards = cards.sort(function () {\r\n            return 0.5 - Math.random();\r\n        });\r\n    };\r\n\r\n    var drawCards = function () {\r\n        for (var i = 0; i < cards.length; i++) {\r\n            var cardNode = cards[i].getNode();\r\n            self.container.append(cardNode);\r\n        }\r\n    };\r\n\r\n    var getPreviousFlippedCard = function()  {\r\n        return flippedCards[flippedCards.length - 2];\r\n    };\r\n\r\n    var isNewHandStarted = function () {\r\n        return getFlippedCardsNumber() % CONST.CARD_COPIES === 1;\r\n    };\r\n\r\n    var isHandFinished = function () {\r\n        return getFlippedCardsNumber() % CONST.CARD_COPIES === 0;\r\n    };\r\n\r\n    var isAllCardsFlipped = function () {\r\n        return getFlippedCardsNumber() === getCardsNumber();\r\n    };\r\n\r\n    var setDiscoveredCards = function () {\r\n        for (var i = 1; i <= CONST.CARD_COPIES; i++) {\r\n            flippedCards[flippedCards.length - i].setDiscovered();\r\n        }\r\n    };\r\n\r\n    var getFlippedCardsNumber = function () {\r\n        return flippedCards.length;\r\n    };\r\n\r\n    var getCardsNumber = function() {\r\n        return cards.length;\r\n    };\r\n\r\n    var coverLatestHandFlippedCards = function () {\r\n        setTimeout(function () {\r\n            for (var i = 0; i < CONST.CARD_COPIES; i++) {\r\n                flippedCards[getFlippedCardsNumber() - 1].getCardNodeAndFlip();\r\n                flippedCards.pop();\r\n            }\r\n        }, CONST.TIME_FOR_FLIP);\r\n    };\r\n\r\n    this.onSelectedCardHandler = function(data) {\r\n        var card = data.card;\r\n        flippedCards.push(card);\r\n        if (isNewHandStarted()) {\r\n            return;\r\n        }\r\n        if (getPreviousFlippedCard().getImage() === card.getImage()) {\r\n            if (isHandFinished()) {\r\n                setDiscoveredCards();\r\n                self.notifyObservers(CONST.EVENT.HAND_FINISHED, {});\r\n                if (isAllCardsFlipped()) {\r\n                    self.notifyObservers(CONST.EVENT.CARDS_ALL_FLIPPED, {});\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            coverLatestHandFlippedCards();\r\n            self.notifyObservers(CONST.EVENT.HAND_INVALID, {});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n\r\n};\r\n\r\n","/* global $, memoryCardGame, luga */\r\n\r\nmemoryCardGame.Card = function (params) {\r\n    'use strict';\r\n\r\n    luga.extend(luga.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            SINGLE_CARD_CLASS: 'memory-card'\r\n        },\r\n        DATA: {\r\n            CARD_ID: 'data-card-id'\r\n        },\r\n        HTML: {\r\n            CARD_NODE: '<li></li>',\r\n            IMAGE_NODE: '<img>'\r\n        },\r\n        EVENT: {\r\n            SELECTED_CARD: 'selectedCard'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        id: null,\r\n        flipped: false,\r\n        image: null\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var discovered = false;\r\n\r\n    var imageNode = $(CONST.HTML.IMAGE_NODE);\r\n\r\n    var self = this;\r\n\r\n    var flip = function (cardNode) {\r\n        config.flipped = !config.flipped;\r\n\r\n        if (config.flipped === true) {\r\n            cardNode.append(getImageNode());\r\n        }\r\n        else {\r\n            cardNode.find(imageNode).remove();\r\n        }\r\n    };\r\n\r\n    this.getCardNodeAndFlip = function () {\r\n        var cardNode = $('.' + CONST.CSS.SINGLE_CARD_CLASS + '[' + CONST.DATA.CARD_ID + '=' + config.id + ']');\r\n        flip(cardNode);\r\n    };\r\n\r\n    this.getImage = function () {\r\n        return config.image;\r\n    };\r\n\r\n    var getImageNode = function () {\r\n        imageNode.attr('src', config.image);\r\n        return imageNode;\r\n    };\r\n\r\n    this.getNode = function () {\r\n        var cardNode = $(CONST.HTML.CARD_NODE);\r\n        cardNode.addClass(CONST.CSS.SINGLE_CARD_CLASS).attr(CONST.DATA.CARD_ID, config.id);\r\n        cardNode.click(function () {\r\n            if (config.flipped === false) {\r\n                flip(cardNode);\r\n                if (discovered === false) {\r\n                    self.notifyObservers(CONST.EVENT.SELECTED_CARD, {\r\n                        card: self\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        return cardNode;\r\n    };\r\n\r\n    this.setDiscovered = function () {\r\n        discovered = true;\r\n    };\r\n};\r\n\r\n","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.Stats = function(params){\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'current-stats-container',\r\n            BEST_SCORE: 'best-score',\r\n            BEST_SCORE_TEXT: 'best-score-text',\r\n            BEST_SCORE_NUMBER: 'best-score-number',\r\n            ATTEMPTS: 'attempts',\r\n            ATTEMPTS_TEXT: 'attempts-text',\r\n            ATTEMPTS_NUMBER: 'attempts-number'\r\n        },\r\n        SELECTOR: {\r\n            ATTEMPTS_NUMBER: '.attempts-number'\r\n        },\r\n        TEXT: {\r\n            ATTEMPTS: 'Attempts: ',\r\n            BEST_SCORE: 'Best score: '\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        bestScoreCounter: null,\r\n        attempts: 0\r\n\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    this.container = $('<div></div>').addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        draw();\r\n    };\r\n\r\n    var draw = function () {\r\n\r\n        var currentMoves = $('<div></div>').addClass(CONST.CSS.ATTEMPTS);\r\n        var attemptsText = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_TEXT).text(CONST.TEXT.ATTEMPTS);\r\n        var attemptsNumber = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_NUMBER).text(config.attempts);\r\n\r\n        currentMoves.append(attemptsText);\r\n        currentMoves.append(attemptsNumber);\r\n\r\n        self.container.append(currentMoves);\r\n\r\n        if (config.bestScoreCounter !== null) {\r\n            var bestScore = $('<div></div>').addClass(CONST.CSS.BEST_SCORE);\r\n            var bestScoreText = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_TEXT).text(CONST.TEXT.BEST_SCORE);\r\n            var bestScoreNumber = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_NUMBER).text(config.bestScoreCounter);\r\n\r\n            bestScore.append(bestScoreText);\r\n            bestScore.append(bestScoreNumber);\r\n            self.container.append(bestScore);\r\n        }\r\n    };\r\n\r\n    this.updateAttemptsCounter = function() {\r\n        config.attempts++;\r\n        $(CONST.SELECTOR.ATTEMPTS_NUMBER).text(config.attempts);\r\n    };\r\n\r\n    this.saveStats = function() {\r\n        if ((config.bestScoreCounter === null || config.attempts < config.bestScoreCounter)) {\r\n            memoryCardGame.utils.addDataInLocalStorage({bestScoreCounter: config.attempts});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n};\r\n\r\n","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.GameManager = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-card-game',\r\n            BOARD_CLASS: 'memory-board',\r\n            TIMER_CLASS: 'timer'\r\n        },\r\n        SELECTOR: {\r\n          TIMER_SELECTOR: '.timer'\r\n        },\r\n        TIMER: 1000\r\n    };\r\n\r\n    var config = {\r\n        cardsClass: CONST.CSS.CARDS_CLASS,\r\n        gameClass: CONST.CSS.ROOT,\r\n        singleCardClass: CONST.CSS.SINGLE_CARD_CLASS\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var deck;\r\n\r\n    var stats;\r\n\r\n    var timer = 0;\r\n\r\n    var timerInterval;\r\n\r\n    var persistentData = {\r\n        bestScoreCounter: null\r\n    };\r\n\r\n    this.container = $('<div></div>').addClass(config.gameClass);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        var memoryLocalStorage = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        if (memoryLocalStorage !== null) {\r\n            persistentData = memoryLocalStorage;\r\n        }\r\n\r\n        stats = new memoryCardGame.Stats({\r\n            bestScoreCounter: persistentData.bestScoreCounter\r\n        });\r\n        self.container.append(stats.container);\r\n\r\n        deck = new memoryCardGame.Deck({\r\n            cardsClass: config.cardsClass,\r\n            singleCardClass: config.singleCardClass\r\n        });\r\n\r\n        deck.addObserver(self);\r\n        self.container.append(deck.container);\r\n\r\n        self.container.append($('<div></div>').addClass(CONST.CSS.TIMER_CLASS).text(timer));\r\n\r\n        $('body').append(self.container);\r\n        startTimer();\r\n    };\r\n\r\n    var endGame = function () {\r\n        stats.saveStats();\r\n        clearInterval(timerInterval);\r\n    };\r\n\r\n    var startTimer = function () {\r\n        timerInterval = setInterval(function () {\r\n            $(CONST.SELECTOR.TIMER_SELECTOR).text(++timer);\r\n        }, CONST.TIMER);\r\n    };\r\n\r\n    this.onHandFinishedHandler = function() {\r\n        stats.updateAttemptsCounter();\r\n    };\r\n\r\n    this.onHandInvalidHandler = function() {\r\n        stats.updateAttemptsCounter();\r\n    };\r\n\r\n    this.onCardsAllFlippedHandler = function() {\r\n        endGame();\r\n    };\r\n\r\n    init.call(this);\r\n};","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.UserOptions = function(params){\r\n\r\n\t'use strict';\r\n\r\n\tvar CONST = {\r\n\t\tCSS: {\r\n\t\t\tUSER_OPTIONS_WRAPPER: 'user-options-wrapper',\r\n\t\t\tOPTION_PANEL_CLASS: 'user-options-panel'\r\n\t\t},\r\n\t\tTEXT: {\r\n\t\t\tPICTURE_NUMBER: 'Number of pictures:',\r\n\t\t\tUSER_OPTION_PANEL: 'User option panel',\r\n\t\t\tCLOSE: 'Close'\r\n\t\t}\r\n\t};\r\n\r\n\tvar config = {\r\n\t\tcardCopies: null\r\n\t};\r\n\r\n\t// Merge incoming params with internal config\r\n\t$.extend(config, params);\r\n\r\n\tvar self = this;\r\n\r\n\tself.container = $('<div></div>').addClass(CONST.CSS.USER_OPTIONS_WRAPPER);\r\n\r\n\tvar init = function () {\r\n\t\tdraw();\r\n\t};\r\n\r\n\tvar draw = function() {\r\n\t\t//TODO: Create utils library for dom elements\r\n\t\tvar userOptionsPanel = $('<div></div>').addClass(CONST.CSS.OPTION_PANEL_CLASS);\r\n\t\tdrawHeader(userOptionsPanel);\r\n\t\tdrawOptionsForm(userOptionsPanel);\r\n\t\tdrawFooter(userOptionsPanel);\r\n\t\tself.container.append(userOptionsPanel);\r\n\t\t//TODO: Create a global class for memoryGame and append panel to it\r\n\t\t$('body').append(self.container);\r\n\t};\r\n\r\n\tvar drawHeader = function(rootNode) {\r\n\t\tvar userOptionsTitle = $('<h2></h2>').text(CONST.TEXT.USER_OPTION_PANEL);\r\n\t\trootNode.append(userOptionsTitle);\r\n\t};\r\n\r\n\tvar drawOptionsForm = function(rootNode) {\r\n\t\tvar howManyPicturesLabel = $('<label></label>').text(CONST.TEXT.PICTURE_NUMBER);\r\n\t\tvar howManyPictures = $('<input type=\"text\">');\r\n\t\thowManyPicturesLabel.append(howManyPictures);\r\n\t\trootNode.append(howManyPicturesLabel);\r\n\t};\r\n\r\n\tvar drawFooter = function(rootNode) {\r\n\t\tvar closeButton = $('<button></button>').text(CONST.TEXT.CLOSE);\r\n\t\tcloseButton.click(function(){\r\n\t\t\tself.container.hide();\r\n\t\t\tnew memoryCardGame.GameManager();\r\n\t\t});\r\n\t\trootNode.append(closeButton);\r\n\t};\r\n\r\n\tinit.call(this);\r\n\r\n};\r\n\r\n"],"sourceRoot":"."}