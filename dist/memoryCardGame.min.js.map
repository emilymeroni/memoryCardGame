{"version":3,"sources":["core.js","utils.js","Deck.js","Card.js","Stats.js","GameManager.js","UserOptions.js"],"names":["window","memoryCardGame","utils","persistInLocalStorage","data","localStorage","setItem","JSON","stringify","addDataInLocalStorage","persistedData","retrieveFromLocalStorage","mergedData","$","extend","parse","getItem","getFromLocalStorage","key","Deck","params","luga","Notifier","this","CONST","CSS","ROOT","SINGLE_CARD_CLASS","CARD_COPIES","TIME_FOR_FLIP","IMAGE_BASE_URL","EVENT","HAND_FINISHED","HAND_INVALID","CARDS_ALL_FLIPPED","HTML","DECK","config","selectedTheme","cards","flippedCards","container","addClass","self","init","setupCards","shuffleCards","drawCards","ajaxSetup","async","getJSON","json","createCards","selectedThemeCards","each","val","j","card","Card","id","length","image","addObserver","push","sort","Math","random","i","append","getPreviousFlippedCard","isNewHandStarted","isHandFinished","isAllCardsFlipped","setDiscoveredCards","setDiscovered","coverLatestHandFlippedCards","setTimeout","getCardNodeAndFlip","pop","onSelectedCardHandler","getImage","notifyObservers","call","DATA","CARD_ID","CARD_NODE","IMAGE_NODE","SELECTED_CARD","flipped","discovered","imageNode","attr","attachEvents","click","flip","cardNode","getImageNode","find","remove","Stats","BEST_SCORE","BEST_SCORE_TEXT","BEST_SCORE_NUMBER","ATTEMPTS","ATTEMPTS_TEXT","ATTEMPTS_NUMBER","SELECTOR","TEXT","attempts","attemptsNumber","bestScoreNumber","draw","currentMoves","attemptsText","text","bestScoreCounter","bestScore","bestScoreText","updateAttemptsCounter","saveStats","undefined","GameManager","GAME_CONTAINER","BOARD_CLASS","TIMER_CLASS","TIMER_SELECTOR","TIMER","rootNode","deck","stats","timerInterval","timer","gameContainer","userOptions","UserOptions","startGame","cardsClass","singleCardClass","startTimer","empty","endGame","clearInterval","timerContainer","setInterval","onChosenOptionsHandler","onHandFinishedHandler","onHandInvalidHandler","onCardsAllFlippedHandler","OPTION_PANEL_CLASS","CHOSEN_OPTIONS","CARD_THEME","PICTURE_NUMBER","USER_OPTION_PANEL","CLOSE","userOptionsPanel","drawHeader","drawOptionsForm","drawFooter","userOptionsTitle","drawCardThemeForm","cardTemeText","dogsOption","catsOption","closeButton","hide"],"mappings":"AAAAA,OAAAC,kBCEAD,OAAAC,eAAAC,SAEA,WACA,YAEAD,gBAAAC,MAAAC,sBAAA,SAAAC,MACAC,aAAAC,QAAA,iBAAAC,KAAAC,UAAAJ,QAGAH,eAAAC,MAAAO,sBAAA,SAAAL,MACA,GAAAM,eAAAT,eAAAC,MAAAS,2BACAC,WAAAC,EAAAC,UAAAJ,cAAAN,KACAH,gBAAAC,MAAAC,sBAAAS,aAGAX,eAAAC,MAAAS,yBAAA,WACA,MAAAJ,MAAAQ,MAAAV,aAAAW,QAAA,oBAGAf,eAAAC,MAAAe,oBAAA,SAAAC,KACA,GAAAR,eAAAT,eAAAC,MAAAS,0BACA,OAAA,QAAAD,cACAA,cAAAQ,KADA,WCvBAjB,eAAAkB,KAAA,SAAAC,QAEA,YAEAC,MAAAP,OAAAO,KAAAC,SAAAC,KAEA,IAAAC,QACAC,KACAC,KAAA,eACAC,kBAAA,eAEAC,YAAA,EACAC,cAAA,IACAC,eAAA,kBACAC,OACAC,cAAA,eACAC,aAAA,cACAC,kBAAA,mBAEAC,MACAC,KAAA,cAIAC,QACAC,cAAA,KAIAzB,GAAAC,OAAAuB,OAAAjB,OAEA,IAAAmB,UAEAC,eAEAjB,MAAAkB,UAAA5B,EAAAW,MAAAW,KAAAC,MAAAM,SAAAlB,MAAAC,IAAAC,KAEA,IAAAiB,MAAApB,KAEAqB,KAAA,WACAC,aACAC,eACAC,aAGAF,WAAA,WACAhC,EAAAmC,WACAC,OAAA,IAGApC,EAAAqC,QAAA,mBAAA,SAAAC,MACAC,YAAAD,KAAAd,OAAAC,kBAGAzB,EAAAmC,WACAC,OAAA,KAIAG,YAAA,SAAAC,oBACAxC,EAAAyC,KAAAD,mBAAA,SAAAnC,IAAAqC,KACA,IAAA,GAAAC,GAAA,EAAAA,EAAAhC,MAAAI,YAAA4B,IAAA,CAEA,GAAAC,MAAA,GAAAxD,gBAAAyD,MACAC,GAAApB,MAAAqB,OACAC,MAAArC,MAAAM,eAAA,KAAAyB,KAEAE,MAAAK,YAAAnB,MACAJ,MAAAwB,KAAAN,UAKAX,aAAA,WACAP,MAAAA,MAAAyB,KAAA,WACA,MAAA,GAAAC,KAAAC,YAIAnB,UAAA,WACA,IAAA,GAAAoB,GAAA,EAAAA,EAAA5B,MAAAqB,OAAAO,IACAxB,KAAAF,UAAA2B,OAAA7B,MAAA4B,GAAA1B,YAIA4B,uBAAA,WACA,MAAA7B,cAAAA,aAAAoB,OAAA,IAGAU,iBAAA,WACA,MAAA9B,cAAAoB,OAAApC,MAAAI,cAAA,GAGA2C,eAAA,WACA,MAAA/B,cAAAoB,OAAApC,MAAAI,cAAA,GAGA4C,kBAAA,WACA,MAAAhC,cAAAoB,SAAArB,MAAAqB,QAGAa,mBAAA,WACA,IAAA,GAAAN,GAAA,EAAAA,GAAA3C,MAAAI,YAAAuC,IACA3B,aAAAA,aAAAoB,OAAAO,GAAAO,iBAIAC,4BAAA,WACAC,WAAA,WACA,IAAA,GAAAT,GAAA,EAAAA,EAAA3C,MAAAI,YAAAuC,IACA3B,aAAAA,aAAAoB,OAAA,GAAAiB,qBACArC,aAAAsC,OAEAtD,MAAAK,eAGAN,MAAAwD,sBAAA,SAAA3E,MACA,GAAAqD,MAAArD,KAAAqD,IACAjB,cAAAuB,KAAAN,MACAa,qBAGAD,yBAAAW,aAAAvB,KAAAuB,WACAT,mBACAE,qBACA9B,KAAAsC,gBAAAzD,MAAAO,MAAAC,kBACAwC,qBACA7B,KAAAsC,gBAAAzD,MAAAO,MAAAG,wBAKAyC,8BACAhC,KAAAsC,gBAAAzD,MAAAO,MAAAE,oBAIAW,KAAAsC,KAAA3D,OCzIAtB,eAAAyD,KAAA,SAAAtC,QACA,YAEAC,MAAAP,OAAAO,KAAAC,SAAAC,KAEA,IAAAC,QACAC,KACAC,KAAA,eAEAyD,MACAC,QAAA,gBAEAjD,MACAkD,UAAA,YACAC,WAAA,SAEAvD,OACAwD,cAAA,iBAIAlD,QACAsB,GAAA,KACA6B,SAAA,EACA3B,MAAA,KAIAhD,GAAAC,OAAAuB,OAAAjB,OAEA,IAAAqE,aAAA,EAEAC,UAAA7E,EAAAW,MAAAW,KAAAmD,WAEA/D,MAAAkB,UAAA5B,EAAAW,MAAAW,KAAAkD,WAAA3C,SAAAlB,MAAAC,IAAAC,KAEA,IAAAiB,MAAApB,KAEAqB,KAAA,WACAD,KAAAF,UAAAkD,KAAAnE,MAAA2D,KAAAC,QAAA/C,OAAAsB,IACAiC,gBAGAA,aAAA,WACAjD,KAAAF,UAAAoD,MAAA,WACAxD,OAAAmD,WAAA,IACAM,KAAAnD,KAAAF,WACAgD,cAAA,GACA9C,KAAAsC,gBAAAzD,MAAAO,MAAAwD,eACA9B,KAAAd,WAOAmD,KAAA,SAAAC,UACA1D,OAAAmD,SAAAnD,OAAAmD,QAEAnD,OAAAmD,WAAA,EACAO,SAAA3B,OAAA4B,gBAGAD,SAAAE,KAAAP,WAAAQ,UAIAF,aAAA,WAEA,MADAN,WAAAC,KAAA,MAAAtD,OAAAwB,OACA6B,UAGAnE,MAAAsD,mBAAA,WACA,GAAAkB,UAAAlF,EAAA,IAAAW,MAAAC,IAAAC,KAAA,IAAAF,MAAA2D,KAAAC,QAAA,IAAA/C,OAAAsB,GAAA,IACAmC,MAAAC,WAGAxE,KAAAyD,SAAA,WACA,MAAA3C,QAAAwB,OAGAtC,KAAAmD,cAAA,WACAe,YAAA,GAGA7C,KAAAsC,KAAA3D,OCrFAtB,eAAAkG,MAAA,SAAA/E,QAEA,YAEA,IAAAI,QACAC,KACAC,KAAA,0BACA0E,WAAA,aACAC,gBAAA,kBACAC,kBAAA,oBACAC,SAAA,WACAC,cAAA,gBACAC,gBAAA,mBAEAC,UACAD,gBAAA,oBAEAE,MACAJ,SAAA,aACAH,WAAA,iBAIA/D,SAGAxB,GAAAC,OAAAuB,OAAAjB,OAEA,IAAAwF,UAAA,EAKAC,eAAAhG,EAAA,iBAAA6B,SAAAlB,MAAAC,IAAAgF,iBAKAK,gBAAAjG,EAAA,iBAAA6B,SAAAlB,MAAAC,IAAA6E,kBAKA/E,MAAAkB,UAAA5B,EAAA,eAAA6B,SAAAlB,MAAAC,IAAAC,KAEA,IAAAiB,MAAApB,KAEAqB,KAAA,WACAmE,QAGAA,KAAA,WAEA,GAAAC,cAAAnG,EAAA,eAAA6B,SAAAlB,MAAAC,IAAA8E,UACAU,aAAApG,EAAA,iBAAA6B,SAAAlB,MAAAC,IAAA+E,eAAAU,KAAA1F,MAAAmF,KAAAJ,SACAM,gBAAAK,KAAAN,UAEAI,aAAA5C,OAAA6C,cACAD,aAAA5C,OAAAyC,gBAEAlE,KAAAF,UAAA2B,OAAA4C,aAEA,IAAAG,kBAAAlH,eAAAC,MAAAe,oBAAA,mBAEA,IAAAkG,iBAAA,CACA,GAAAC,WAAAvG,EAAA,eAAA6B,SAAAlB,MAAAC,IAAA2E,YACAiB,cAAAxG,EAAA,iBAAA6B,SAAAlB,MAAAC,IAAA4E,iBAAAa,KAAA1F,MAAAmF,KAAAP,WACAU,iBAAAI,KAAAC,kBAEAC,UAAAhD,OAAAiD,eACAD,UAAAhD,OAAA0C,iBACAnE,KAAAF,UAAA2B,OAAAgD,YAIA7F,MAAA+F,sBAAA,WACAV,WACAC,eAAAK,KAAAN,WAGArF,KAAAgG,UAAA,WACA,GAAAJ,kBAAAlH,eAAAC,MAAAe,oBAAA,qBACAuG,SAAAL,kBAAAA,iBAAAP,WACA3G,eAAAC,MAAAO,uBAAA0G,iBAAAP,YAIAhE,KAAAsC,KAAA3D,OCvFAtB,eAAAwH,YAAA,SAAArG,QAEA,YAEA,IAAAI,QACAC,KACAC,KAAA,mBACAgG,eAAA,iBACAC,YAAA,eACAC,YAAA,SAEAlB,UACAmB,eAAA,UAEAC,MAAA,KAGAzF,QACA0F,SAAAlH,EAAA,QAIAA,GAAAC,OAAAuB,OAAAjB,OAEA,IAAA4G,MAEAC,MAIAC,cAFAC,MAAA,EAIAC,cAAAvH,EAAA,eAAA6B,SAAAlB,MAAAC,IAAAiG,eAEAnG,MAAAkB,UAAA5B,EAAA,eAAA6B,SAAAlB,MAAAC,IAAAC,KAEA,IAAAiB,MAAApB,KAEAqB,KAAA,WACA,GAAAyF,aAAA,GAAApI,gBAAAqI,WACAD,aAAAvE,YAAAnB,MACAA,KAAAF,UAAA2B,OAAAiE,YAAA5F,WACAJ,OAAA0F,SAAA3D,OAAAzB,KAAAF,YAGA8F,UAAA,SAAAjG,eACA2F,MAAA,GAAAhI,gBAAAkG,MACAiC,cAAAhE,OAAA6D,MAAAxF,WAEAuF,KAAA,GAAA/H,gBAAAkB,MACAqH,WAAAnG,OAAAmG,WACAC,gBAAApG,OAAAoG,gBACAnG,cAAAA,gBAEA0F,KAAAlE,YAAAnB,MACAyF,cAAAhE,OAAA4D,KAAAvF,WAEAiG,aAEA/F,KAAAF,UAAAkG,QAAAvE,OAAAgE,eACA/F,OAAA0F,SAAA3D,OAAAzB,KAAAF,YAGAmG,QAAA,WACAX,MAAAV,YACAsB,cAAAX,gBAGAQ,WAAA,WACA,GAAAI,gBAAAjI,EAAA,eAAA6B,SAAAlB,MAAAC,IAAAmG,YACAQ,eAAAhE,OAAA0E,eAAA5B,KAAAiB,QACAD,cAAAa,YAAA,WACAD,eAAA5B,OAAAiB,QACA3G,MAAAsG,OAGAvG,MAAAyH,uBAAA,SAAA5I,MACAmI,UAAAnI,KAAAkC,gBAGAf,KAAA0H,sBAAA,WACAhB,MAAAX,yBAGA/F,KAAA2H,qBAAA,WACAjB,MAAAX,yBAGA/F,KAAA4H,yBAAA,WACAP,WAGAhG,KAAAsC,KAAA3D,OC5FAtB,eAAAqI,YAAA,SAAAlH,QAEA,YAEAC,MAAAP,OAAAO,KAAAC,SAAAC,KAEA,IAAAC,QACAC,KACAC,KAAA,uBACA0H,mBAAA,sBAEArH,OACAsH,eAAA,iBAEA1C,MACA2C,WAAA,cACAC,eAAA,sBACAC,kBAAA,oBACAC,MAAA,UAIApH,SAGAxB,GAAAC,OAAAuB,OAAAjB,OAEA,IAAAuB,MAAApB,IAEAoB,MAAAF,UAAA5B,EAAA,eAAA6B,SAAAlB,MAAAC,IAAAC,KAEA,IAAAkB,MAAA,WACAmE,QAGAA,KAAA,WAEA,GAAA2C,kBAAA7I,EAAA,eAAA6B,SAAAlB,MAAAC,IAAA2H,mBACAO,YAAAD,kBACAE,gBAAAF,kBACAG,WAAAH,kBACA/G,KAAAF,UAAA2B,OAAAsF,mBAGAC,WAAA,SAAA5B,UACA,GAAA+B,kBAAAjJ,EAAA,aAAAqG,KAAA1F,MAAAmF,KAAA6C,kBACAzB,UAAA3D,OAAA0F,mBAGAF,gBAAA,SAAA7B,UACAgC,kBAAAhC,WAUAgC,kBAAA,SAAAhC,UACA,GAAAiC,cAAAnJ,EAAA,iBAAAqG,KAAA1F,MAAAmF,KAAA2C,WACAvB,UAAA3D,OAAA4F,aACA,IAAAC,YAAApJ,EAAA,qEACAqJ,WAAArJ,EAAA,wEACAkH,UAAA3D,OAAA6F,YACAlC,SAAA3D,OAAA8F,aAGAL,WAAA,SAAA9B,UACA,GAAAoC,aAAAtJ,EAAA,qBAAAqG,KAAA1F,MAAAmF,KAAA8C,MACAU,aAAAtE,MAAA,WACAlD,KAAAF,UAAA2H,MACA,IAAA9H,eAAAzB,EAAA,qCAAA0C,KACAZ,MAAAsC,gBAAAzD,MAAAO,MAAAsH,gBACA/G,cAAAA,kBAGAyF,SAAA3D,OAAA+F,aAGAvH,MAAAsC,KAAA3D","file":"memoryCardGame.min.js","sourcesContent":["window.memoryCardGame = {};","/* global $, memoryCardGame */\r\n\r\nwindow.memoryCardGame.utils = {};\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    memoryCardGame.utils.persistInLocalStorage = function (data) {\r\n        localStorage.setItem('memoryCardGame', JSON.stringify(data));\r\n    };\r\n\r\n    memoryCardGame.utils.addDataInLocalStorage = function (data) {\r\n        var persistedData = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        var mergedData = $.extend({}, persistedData, data);\r\n        memoryCardGame.utils.persistInLocalStorage(mergedData);\r\n    };\r\n\r\n    memoryCardGame.utils.retrieveFromLocalStorage = function () {\r\n        return JSON.parse(localStorage.getItem('memoryCardGame'));\r\n    };\r\n\r\n    memoryCardGame.utils.getFromLocalStorage = function (key) {\r\n        var persistedData = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        if(persistedData !== null) {\r\n            return persistedData[key];\r\n        }\r\n    };\r\n})();\r\n","memoryCardGame.Deck = function (params) {\r\n\r\n    'use strict';\r\n\r\n    luga.extend(luga.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-cards',\r\n            SINGLE_CARD_CLASS: 'memory-card'\r\n        },\r\n        CARD_COPIES: 2,\r\n        TIME_FOR_FLIP: 500,\r\n        IMAGE_BASE_URL: 'src\\\\cardthemes',\r\n        EVENT: {\r\n            HAND_FINISHED: 'handFinished',\r\n            HAND_INVALID: 'handInvalid',\r\n            CARDS_ALL_FLIPPED: 'cardsAllFlipped'\r\n        },\r\n        HTML: {\r\n            DECK: '<ul></ul>'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        selectedTheme: null\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var cards = [];\r\n\r\n    var flippedCards = [];\r\n\r\n    this.container = $(CONST.HTML.DECK).addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        setupCards();\r\n        shuffleCards();\r\n        drawCards();\r\n    };\r\n\r\n    var setupCards = function () {\r\n        $.ajaxSetup({\r\n            async: false\r\n        });\r\n\r\n        $.getJSON('dist/themes.json', function (json) {\r\n            createCards(json[config.selectedTheme]);\r\n        });\r\n\r\n        $.ajaxSetup({\r\n            async: true\r\n        });\r\n    };\r\n\r\n    var createCards = function(selectedThemeCards) {\r\n        $.each(selectedThemeCards, function (key, val) {\r\n            for (var j = 0; j < CONST.CARD_COPIES; j++) {\r\n\r\n                var card = new memoryCardGame.Card({\r\n                    id: cards.length,\r\n                    image: CONST.IMAGE_BASE_URL + '\\\\' + val\r\n                });\r\n                card.addObserver(self);\r\n                cards.push(card);\r\n            }\r\n        });\r\n    };\r\n\r\n    var shuffleCards = function () {\r\n        cards = cards.sort(function () {\r\n            return 0.5 - Math.random();\r\n        });\r\n    };\r\n\r\n    var drawCards = function () {\r\n        for (var i = 0; i < cards.length; i++) {\r\n            self.container.append(cards[i].container);\r\n        }\r\n    };\r\n\r\n    var getPreviousFlippedCard = function () {\r\n        return flippedCards[flippedCards.length - 2];\r\n    };\r\n\r\n    var isNewHandStarted = function () {\r\n        return flippedCards.length % CONST.CARD_COPIES === 1;\r\n    };\r\n\r\n    var isHandFinished = function () {\r\n        return flippedCards.length % CONST.CARD_COPIES === 0;\r\n    };\r\n\r\n    var isAllCardsFlipped = function () {\r\n        return flippedCards.length === cards.length;\r\n    };\r\n\r\n    var setDiscoveredCards = function () {\r\n        for (var i = 1; i <= CONST.CARD_COPIES; i++) {\r\n            flippedCards[flippedCards.length - i].setDiscovered();\r\n        }\r\n    };\r\n\r\n    var coverLatestHandFlippedCards = function () {\r\n        setTimeout(function () {\r\n            for (var i = 0; i < CONST.CARD_COPIES; i++) {\r\n                flippedCards[flippedCards.length - 1].getCardNodeAndFlip();\r\n                flippedCards.pop();\r\n            }\r\n        }, CONST.TIME_FOR_FLIP);\r\n    };\r\n\r\n    this.onSelectedCardHandler = function (data) {\r\n        var card = data.card;\r\n        flippedCards.push(card);\r\n        if (isNewHandStarted()) {\r\n            return;\r\n        }\r\n        if (getPreviousFlippedCard().getImage() === card.getImage()) {\r\n            if (isHandFinished()) {\r\n                setDiscoveredCards();\r\n                self.notifyObservers(CONST.EVENT.HAND_FINISHED, {});\r\n                if (isAllCardsFlipped()) {\r\n                    self.notifyObservers(CONST.EVENT.CARDS_ALL_FLIPPED, {});\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            coverLatestHandFlippedCards();\r\n            self.notifyObservers(CONST.EVENT.HAND_INVALID, {});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n\r\n};\r\n\r\n","memoryCardGame.Card = function (params) {\r\n    'use strict';\r\n\r\n    luga.extend(luga.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-card'\r\n        },\r\n        DATA: {\r\n            CARD_ID: 'data-card-id'\r\n        },\r\n        HTML: {\r\n            CARD_NODE: '<li></li>',\r\n            IMAGE_NODE: '<img>'\r\n        },\r\n        EVENT: {\r\n            SELECTED_CARD: 'selectedCard'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        id: null,\r\n        flipped: false,\r\n        image: null\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var discovered = false;\r\n\r\n    var imageNode = $(CONST.HTML.IMAGE_NODE);\r\n\r\n    this.container = $(CONST.HTML.CARD_NODE).addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        self.container.attr(CONST.DATA.CARD_ID, config.id);\r\n        attachEvents();\r\n    };\r\n\r\n    var attachEvents = function () {\r\n        self.container.click(function () {\r\n            if (config.flipped === false) {\r\n                flip(self.container);\r\n                if (discovered === false) {\r\n                    self.notifyObservers(CONST.EVENT.SELECTED_CARD, {\r\n                        card: self\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    var flip = function (cardNode) {\r\n        config.flipped = !config.flipped;\r\n\r\n        if (config.flipped === true) {\r\n            cardNode.append(getImageNode());\r\n        }\r\n        else {\r\n            cardNode.find(imageNode).remove();\r\n        }\r\n    };\r\n\r\n    var getImageNode = function () {\r\n        imageNode.attr('src', config.image);\r\n        return imageNode;\r\n    };\r\n\r\n    this.getCardNodeAndFlip = function () {\r\n        var cardNode = $('.' + CONST.CSS.ROOT + '[' + CONST.DATA.CARD_ID + '=' + config.id + ']');\r\n        flip(cardNode);\r\n    };\r\n\r\n    this.getImage = function () {\r\n        return config.image;\r\n    };\r\n\r\n    this.setDiscovered = function () {\r\n        discovered = true;\r\n    };\r\n\r\n    init.call(this);\r\n};\r\n\r\n","memoryCardGame.Stats = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'current-stats-container',\r\n            BEST_SCORE: 'best-score',\r\n            BEST_SCORE_TEXT: 'best-score-text',\r\n            BEST_SCORE_NUMBER: 'best-score-number',\r\n            ATTEMPTS: 'attempts',\r\n            ATTEMPTS_TEXT: 'attempts-text',\r\n            ATTEMPTS_NUMBER: 'attempts-number'\r\n        },\r\n        SELECTOR: {\r\n            ATTEMPTS_NUMBER: '.attempts-number'\r\n        },\r\n        TEXT: {\r\n            ATTEMPTS: 'Attempts: ',\r\n            BEST_SCORE: 'Best score: '\r\n        }\r\n    };\r\n\r\n    var config = {};\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var attempts = 0;\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    var attemptsNumber = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_NUMBER);\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    var bestScoreNumber = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_NUMBER);\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    this.container = $('<div></div>').addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        draw();\r\n    };\r\n\r\n    var draw = function () {\r\n\r\n        var currentMoves = $('<div></div>').addClass(CONST.CSS.ATTEMPTS);\r\n        var attemptsText = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_TEXT).text(CONST.TEXT.ATTEMPTS);\r\n        attemptsNumber.text(attempts);\r\n\r\n        currentMoves.append(attemptsText);\r\n        currentMoves.append(attemptsNumber);\r\n\r\n        self.container.append(currentMoves);\r\n\r\n        var bestScoreCounter = memoryCardGame.utils.getFromLocalStorage('bestScoreCounter');\r\n\r\n        if (bestScoreCounter) {\r\n            var bestScore = $('<div></div>').addClass(CONST.CSS.BEST_SCORE);\r\n            var bestScoreText = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_TEXT).text(CONST.TEXT.BEST_SCORE);\r\n            bestScoreNumber.text(bestScoreCounter);\r\n\r\n            bestScore.append(bestScoreText);\r\n            bestScore.append(bestScoreNumber);\r\n            self.container.append(bestScore);\r\n        }\r\n    };\r\n\r\n    this.updateAttemptsCounter = function () {\r\n        attempts++;\r\n        attemptsNumber.text(attempts);\r\n    };\r\n\r\n    this.saveStats = function () {\r\n        var bestScoreCounter = memoryCardGame.utils.getFromLocalStorage('bestScoreCounter');\r\n        if ((bestScoreCounter === undefined || attempts < bestScoreCounter)) {\r\n            memoryCardGame.utils.addDataInLocalStorage({bestScoreCounter: attempts});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n};\r\n\r\n","memoryCardGame.GameManager = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-card-game',\r\n            GAME_CONTAINER: 'game-container',\r\n            BOARD_CLASS: 'memory-board',\r\n            TIMER_CLASS: 'timer'\r\n        },\r\n        SELECTOR: {\r\n            TIMER_SELECTOR: '.timer'\r\n        },\r\n        TIMER: 1000\r\n    };\r\n\r\n    var config = {\r\n        rootNode: $('body')\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var deck;\r\n\r\n    var stats;\r\n\r\n    var timer = 0;\r\n\r\n    var timerInterval;\r\n\r\n    var gameContainer = $('<div></div>').addClass(CONST.CSS.GAME_CONTAINER);\r\n\r\n    this.container = $('<div></div>').addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        var userOptions = new memoryCardGame.UserOptions();\r\n        userOptions.addObserver(self);\r\n        self.container.append(userOptions.container);\r\n        config.rootNode.append(self.container);\r\n    };\r\n\r\n    var startGame = function (selectedTheme) {\r\n        stats = new memoryCardGame.Stats();\r\n        gameContainer.append(stats.container);\r\n\r\n        deck = new memoryCardGame.Deck({\r\n            cardsClass: config.cardsClass,\r\n            singleCardClass: config.singleCardClass,\r\n            selectedTheme: selectedTheme\r\n        });\r\n        deck.addObserver(self);\r\n        gameContainer.append(deck.container);\r\n\r\n        startTimer();\r\n\r\n        self.container.empty().append(gameContainer);\r\n        config.rootNode.append(self.container);\r\n    };\r\n\r\n    var endGame = function () {\r\n        stats.saveStats();\r\n        clearInterval(timerInterval);\r\n    };\r\n\r\n    var startTimer = function () {\r\n        var timerContainer = $('<div></div>').addClass(CONST.CSS.TIMER_CLASS);\r\n        gameContainer.append(timerContainer.text(timer));\r\n        timerInterval = setInterval(function () {\r\n            timerContainer.text(++timer);\r\n        }, CONST.TIMER);\r\n    };\r\n\r\n    this.onChosenOptionsHandler = function (data) {\r\n        startGame(data.selectedTheme);\r\n    };\r\n\r\n    this.onHandFinishedHandler = function () {\r\n        stats.updateAttemptsCounter();\r\n    };\r\n\r\n    this.onHandInvalidHandler = function () {\r\n        stats.updateAttemptsCounter();\r\n    };\r\n\r\n    this.onCardsAllFlippedHandler = function () {\r\n        endGame();\r\n    };\r\n\r\n    init.call(this);\r\n};","memoryCardGame.UserOptions = function (params) {\r\n\r\n    'use strict';\r\n\r\n    luga.extend(luga.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'user-options-wrapper',\r\n            OPTION_PANEL_CLASS: 'user-options-panel'\r\n        },\r\n        EVENT: {\r\n            CHOSEN_OPTIONS: 'chosenOptions'\r\n        },\r\n        TEXT: {\r\n            CARD_THEME: 'Card theme:',\r\n            PICTURE_NUMBER: 'Number of pictures:',\r\n            USER_OPTION_PANEL: 'User option panel',\r\n            CLOSE: 'Close'\r\n        }\r\n    };\r\n\r\n    var config = {};\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var self = this;\r\n\r\n    self.container = $('<div></div>').addClass(CONST.CSS.ROOT);\r\n\r\n    var init = function () {\r\n        draw();\r\n    };\r\n\r\n    var draw = function () {\r\n        //TODO: Create utils library for dom elements\r\n        var userOptionsPanel = $('<div></div>').addClass(CONST.CSS.OPTION_PANEL_CLASS);\r\n        drawHeader(userOptionsPanel);\r\n        drawOptionsForm(userOptionsPanel);\r\n        drawFooter(userOptionsPanel);\r\n        self.container.append(userOptionsPanel);\r\n    };\r\n\r\n    var drawHeader = function (rootNode) {\r\n        var userOptionsTitle = $('<h2></h2>').text(CONST.TEXT.USER_OPTION_PANEL);\r\n        rootNode.append(userOptionsTitle);\r\n    };\r\n\r\n    var drawOptionsForm = function (rootNode) {\r\n        drawCardThemeForm(rootNode);\r\n    };\r\n\r\n    var drawHowManyPicturesForm = function (rootNode) {\r\n        var howManyPicturesLabel = $('<label></label>').text(CONST.TEXT.PICTURE_NUMBER);\r\n        var howManyPictures = $('<input type=\"text\">');\r\n        howManyPicturesLabel.append(howManyPictures);\r\n        rootNode.append(howManyPicturesLabel);\r\n    };\r\n\r\n    var drawCardThemeForm = function (rootNode) {\r\n        var cardTemeText = $('<span></span>').text(CONST.TEXT.CARD_THEME);\r\n        rootNode.append(cardTemeText);\r\n        var dogsOption = $('<label><input name=\"theme\" value=\"dogs\" type=\"radio\">Dogs</label>');\r\n        var catsOption = $('<label><input name=\"theme\" value=\"cats\" type=\"radio\">Cats</label><br>');\r\n        rootNode.append(dogsOption);\r\n        rootNode.append(catsOption);\r\n    };\r\n\r\n    var drawFooter = function (rootNode) {\r\n        var closeButton = $('<button></button>').text(CONST.TEXT.CLOSE);\r\n        closeButton.click(function () {\r\n            self.container.hide();\r\n            var selectedTheme = $('input:radio[name=\\'theme\\']:checked').val();\r\n            self.notifyObservers(CONST.EVENT.CHOSEN_OPTIONS, {\r\n                selectedTheme: selectedTheme\r\n            });\r\n        });\r\n        rootNode.append(closeButton);\r\n    };\r\n\r\n    init.call(this);\r\n\r\n};\r\n\r\n"],"sourceRoot":"."}