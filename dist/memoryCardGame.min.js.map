{"version":3,"sources":["core.js","utils.js","Deck.js","Card.js","Stats.js","GameManager.js","UserOptions.js"],"names":["window","memoryCardGame","utils","persistInLocalStorage","data","localStorage","setItem","JSON","stringify","addDataInLocalStorage","persistedData","retrieveFromLocalStorage","mergedData","$","extend","parse","getItem","Deck","params","CONST","CSS","ROOT","SINGLE_CARD_CLASS","CARD_COPIES","DEFAULT_IMAGES","IMAGE_BASE_URL","config","gameManager","cardsClass","CARDS_CLASS","singleCardClass","cards","imageMap","this","container","addClass","self","init","concat","createCards","shuffleCards","drawCards","i","length","j","card","Card","id","image","push","sort","Math","random","cardNode","getNode","append","getCardsNumber","call","DATA","CARD_ID","HTML","CARD_NODE","IMAGE_NODE","flipped","discovered","imageNode","flip","getImageNode","find","remove","getCardNodeAndFlip","getImage","attr","click","onCardSelected","setDiscovered","Stats","BEST_SCORE","BEST_SCORE_TEXT","BEST_SCORE_NUMBER","ATTEMPTS","ATTEMPTS_TEXT","ATTEMPTS_NUMBER","SELECTOR","TEXT","bestScoreCounter","attempts","draw","currentMoves","attemptsText","text","attemptsNumber","bestScore","bestScoreText","bestScoreNumber","updateAttemptsCounter","saveStats","GameManager","BOARD_CLASS","TIME_FOR_FLIP","gameClass","deck","stats","discoveredSameCards","flippedOverCards","timer","persistentData","memoryLocalStorage","startTimer","setDiscoveredCards","coverCards","setTimeout","endGame","setInterval","getPreviousCardFromDeck","isGameEnded","UserOptions","USER_OPTIONS_WRAPPER","OPTION_PANEL_CLASS","PICTURE_NUMBER","USER_OPTION_PANEL","CLOSE","cardCopies","userOptionsPanel","drawHeader","drawOptionsForm","drawFooter","rootNode","userOptionsTitle","howManyPicturesLabel","howManyPictures","closeButton","hide"],"mappings":"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","file":"memoryCardGame.min.js","sourcesContent":["window.memoryCardGame = {};","/* global $, memoryCardGame */\r\n\r\nwindow.memoryCardGame.utils = {};\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    memoryCardGame.utils.persistInLocalStorage = function (data) {\r\n        localStorage.setItem('memoryCardGame', JSON.stringify(data));\r\n    };\r\n\r\n    memoryCardGame.utils.addDataInLocalStorage = function (data) {\r\n        var persistedData = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        var mergedData = $.extend({}, persistedData, data);\r\n        memoryCardGame.utils.persistInLocalStorage(mergedData);\r\n    };\r\n\r\n        memoryCardGame.utils.retrieveFromLocalStorage = function () {\r\n        return JSON.parse(localStorage.getItem('memoryCardGame'));\r\n    };\r\n})();\r\n","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.Deck = function(params){\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-cards',\r\n            SINGLE_CARD_CLASS: 'memory-card'\r\n        },\r\n        CARD_COPIES: 2,\r\n        DEFAULT_IMAGES: [\r\n            'Hydrangeas.jpg',\r\n            'Jellyfish.jpg',\r\n            'Koala.jpg',\r\n            'Penguins.jpg',\r\n            'Tulips.jpg'\r\n        ],\r\n        IMAGE_BASE_URL: 'src\\\\images'\r\n    };\r\n\r\n    var config = {\r\n        gameManager: null,\r\n        cardsClass: CONST.CSS.CARDS_CLASS,\r\n        singleCardClass: CONST.CSS.SINGLE_CARD_CLASS\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var cards = [];\r\n\r\n    var imageMap = [];\r\n\r\n    this.container = $('<ul></ul>').addClass(config.cardsClass);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        imageMap = imageMap.concat(CONST.DEFAULT_IMAGES);\r\n        createCards();\r\n        shuffleCards();\r\n        drawCards();\r\n    };\r\n\r\n    var createCards = function() {\r\n        for (var i = 0; i < imageMap.length; i++) {\r\n            for (var j = 0; j < CONST.CARD_COPIES; j++) {\r\n                var card = new memoryCardGame.Card({\r\n                    id: cards.length,\r\n                    image: CONST.IMAGE_BASE_URL + '\\\\' + imageMap[i],\r\n                    gameManager: config.gameManager\r\n                });\r\n                cards.push(card);\r\n            }\r\n        }\r\n    };\r\n\r\n    var shuffleCards = function () {\r\n        cards = cards.sort(function () {\r\n            return 0.5 - Math.random();\r\n        });\r\n    };\r\n\r\n    var drawCards = function () {\r\n        for (var i = 0; i < cards.length; i++) {\r\n            var cardNode = cards[i].getNode();\r\n            self.container.append(cardNode);\r\n        }\r\n    };\r\n\r\n    this.getCardsNumber = function() {\r\n        return cards.length;\r\n    };\r\n\r\n    init.call(this);\r\n\r\n};\r\n\r\n","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.Card = function(params){\r\n\r\n\t'use strict';\r\n\r\n\tvar CONST = {\r\n\t\tCSS: {\r\n\t\t\tSINGLE_CARD_CLASS: 'memory-card'\r\n\t\t},\r\n\t\tDATA: {\r\n\t\t\tCARD_ID: 'data-card-id'\r\n\t\t},\r\n\t\tHTML: {\r\n\t\t\tCARD_NODE: '<li></li>',\r\n\t\t\tIMAGE_NODE: '<img>'\r\n\t\t}\r\n\t};\r\n\r\n\tvar config = {\r\n\t\tid: null,\r\n\t\tflipped: false,\r\n\t\timage: null,\r\n\t\tgameManager: null\r\n\t};\r\n\r\n\t// Merge incoming params with internal config\r\n\t$.extend(config, params);\r\n\r\n\tvar discovered = false;\r\n\r\n\tvar imageNode = $(CONST.HTML.IMAGE_NODE);\r\n\r\n\tvar self = this;\r\n\r\n\t var flip = function(cardNode) {\r\n\t\tconfig.flipped = !config.flipped;\r\n\r\n\t\tif(config.flipped === true){\r\n\t\t\tcardNode.append(getImageNode());\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcardNode.find(imageNode).remove();\r\n\t\t}\r\n\t};\r\n\r\n\tthis.getCardNodeAndFlip = function() {\r\n\t\tvar cardNode = $('.' + CONST.CSS.SINGLE_CARD_CLASS + '[' + CONST.DATA.CARD_ID + '=' + config.id + ']');\r\n\t\tflip(cardNode);\r\n\t};\r\n\r\n\tthis.getImage = function() {\r\n\t\treturn config.image;\r\n\t};\r\n\r\n\tvar getImageNode = function() {\r\n\t\timageNode.attr('src', config.image);\r\n\t\treturn imageNode;\r\n\t};\r\n\r\n\tthis.getNode = function() {\r\n\t\tvar cardNode = $(CONST.HTML.CARD_NODE);\r\n\t\tcardNode.addClass(CONST.CSS.SINGLE_CARD_CLASS).attr(CONST.DATA.CARD_ID, config.id);\r\n\t\tcardNode.click(function(){\r\n\t\t\tif(config.flipped === false) {\r\n\t\t\t\tflip(cardNode);\r\n\t\t\t\tif(discovered === false) {\r\n\t\t\t\t\tconfig.gameManager.onCardSelected(self);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn cardNode;\r\n\t};\r\n\r\n\tthis.setDiscovered = function() {\r\n\t\tdiscovered = true;\r\n\t};\r\n};\r\n\r\n","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.Stats = function(params){\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'current-stats-container',\r\n            BEST_SCORE: 'best-score',\r\n            BEST_SCORE_TEXT: 'best-score-text',\r\n            BEST_SCORE_NUMBER: 'best-score-number',\r\n            ATTEMPTS: 'attempts',\r\n            ATTEMPTS_TEXT: 'attempts-text',\r\n            ATTEMPTS_NUMBER: 'attempts-number'\r\n        },\r\n        SELECTOR: {\r\n            ATTEMPTS_NUMBER: '.attempts-number'\r\n        },\r\n        TEXT: {\r\n            ATTEMPTS: 'Attempts: ',\r\n            BEST_SCORE: 'Best score: '\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        bestScoreCounter: null,\r\n        attempts: 0\r\n\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    this.container = $('<div></div>').addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        draw();\r\n    };\r\n\r\n    var draw = function () {\r\n\r\n        var currentMoves = $('<div></div>').addClass(CONST.CSS.ATTEMPTS);\r\n        var attemptsText = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_TEXT).text(CONST.TEXT.ATTEMPTS);\r\n        var attemptsNumber = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_NUMBER).text(config.attempts);\r\n\r\n        currentMoves.append(attemptsText);\r\n        currentMoves.append(attemptsNumber);\r\n\r\n        self.container.append(currentMoves);\r\n\r\n        if (config.bestScoreCounter !== null) {\r\n            var bestScore = $('<div></div>').addClass(CONST.CSS.BEST_SCORE);\r\n            var bestScoreText = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_TEXT).text(CONST.TEXT.BEST_SCORE);\r\n            var bestScoreNumber = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_NUMBER).text(config.bestScoreCounter);\r\n\r\n            bestScore.append(bestScoreText);\r\n            bestScore.append(bestScoreNumber);\r\n            self.container.append(bestScore);\r\n        }\r\n    };\r\n\r\n    this.updateAttemptsCounter = function() {\r\n        config.attempts++;\r\n        $(CONST.SELECTOR.ATTEMPTS_NUMBER).text(config.attempts);\r\n    };\r\n\r\n    this.saveStats = function() {\r\n        if ((config.bestScoreCounter === null || config.attempts < config.bestScoreCounter)) {\r\n            memoryCardGame.utils.addDataInLocalStorage({bestScoreCounter: config.attempts});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n};\r\n\r\n","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.GameManager = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-card-game',\r\n            BOARD_CLASS: 'memory-board'\r\n        },\r\n        CARD_COPIES: 2,\r\n        TIME_FOR_FLIP: 500\r\n    };\r\n\r\n    var config = {\r\n        cardsClass: CONST.CSS.CARDS_CLASS,\r\n        gameClass: CONST.CSS.ROOT,\r\n        singleCardClass: CONST.CSS.SINGLE_CARD_CLASS\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var discoveredSameCards = 0;\r\n\r\n    var flippedOverCards = [];\r\n\r\n    var deck;\r\n\r\n    var stats;\r\n\r\n    var timer = 0;\r\n\r\n    var persistentData = {\r\n        bestScoreCounter: null\r\n    };\r\n\r\n    this.container = $('<div></div>').addClass(config.gameClass);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        var memoryLocalStorage = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        if (memoryLocalStorage !== null) {\r\n            persistentData = memoryLocalStorage;\r\n        }\r\n        stats = new memoryCardGame.Stats({\r\n            bestScoreCounter: persistentData.bestScoreCounter\r\n        });\r\n        self.container.append(stats.container);\r\n\r\n        deck = new memoryCardGame.Deck({\r\n            gameManager: self,\r\n            cardsClass: config.cardsClass,\r\n            singleCardClass: config.singleCardClass\r\n        });\r\n\r\n        self.container.append(deck.container);\r\n\r\n        $('body').append(self.container);\r\n        startTimer();\r\n    };\r\n\r\n    var setDiscoveredCards = function (flippedOverCards) {\r\n        for (var i = 0; i < flippedOverCards.length; i++) {\r\n            flippedOverCards[i].setDiscovered();\r\n        }\r\n        discoveredSameCards++;\r\n    };\r\n\r\n    var coverCards = function (flippedOverCards) {\r\n        setTimeout(function () {\r\n            for (var i = 0; i < flippedOverCards.length; i++) {\r\n                flippedOverCards[i].getCardNodeAndFlip();\r\n            }\r\n        }, CONST.TIME_FOR_FLIP);\r\n    };\r\n\r\n    //TODO: Cleanup timer\r\n    var endGame = function () {\r\n        stats.saveStats();\r\n    };\r\n\r\n    //TODO: Change interval milliseconds to constant\r\n    var startTimer = function () {\r\n        setInterval(function () {\r\n            timer++;\r\n        }, 1000);\r\n    };\r\n\r\n    var getPreviousCardFromDeck = function () {\r\n        return flippedOverCards[flippedOverCards.length - 2];\r\n    };\r\n\r\n    var isGameEnded = function () {\r\n        return discoveredSameCards * CONST.CARD_COPIES === deck.getCardsNumber();\r\n    };\r\n\r\n    this.onCardSelected = function (card) {\r\n        flippedOverCards.push(card);\r\n        if (flippedOverCards.length <= 1) {\r\n            return;\r\n        }\r\n        if (getPreviousCardFromDeck().getImage() === card.getImage()) {\r\n            if (flippedOverCards.length === CONST.CARD_COPIES) {\r\n                setDiscoveredCards(flippedOverCards);\r\n                flippedOverCards = [];\r\n                stats.updateAttemptsCounter();\r\n                if (isGameEnded() === true) {\r\n                    endGame();\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            coverCards(flippedOverCards);\r\n            flippedOverCards = [];\r\n            stats.updateAttemptsCounter();\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n};","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.UserOptions = function(params){\r\n\r\n\t'use strict';\r\n\r\n\tvar CONST = {\r\n\t\tCSS: {\r\n\t\t\tUSER_OPTIONS_WRAPPER: 'user-options-wrapper',\r\n\t\t\tOPTION_PANEL_CLASS: 'user-options-panel'\r\n\t\t},\r\n\t\tTEXT: {\r\n\t\t\tPICTURE_NUMBER: 'Number of pictures:',\r\n\t\t\tUSER_OPTION_PANEL: 'User option panel',\r\n\t\t\tCLOSE: 'Close'\r\n\t\t}\r\n\t};\r\n\r\n\tvar config = {\r\n\t\tcardCopies: null\r\n\t};\r\n\r\n\t// Merge incoming params with internal config\r\n\t$.extend(config, params);\r\n\r\n\tvar self = this;\r\n\r\n\tself.container = $('<div></div>').addClass(CONST.CSS.USER_OPTIONS_WRAPPER);\r\n\r\n\tvar init = function () {\r\n\t\tdraw();\r\n\t};\r\n\r\n\tvar draw = function() {\r\n\t\t//TODO: Create utils library for dom elements\r\n\t\tvar userOptionsPanel = $('<div></div>').addClass(CONST.CSS.OPTION_PANEL_CLASS);\r\n\t\tdrawHeader(userOptionsPanel);\r\n\t\tdrawOptionsForm(userOptionsPanel);\r\n\t\tdrawFooter(userOptionsPanel);\r\n\t\tself.container.append(userOptionsPanel);\r\n\t\t//TODO: Create a global class for memoryGame and append panel to it\r\n\t\t$('body').append(self.container);\r\n\t};\r\n\r\n\tvar drawHeader = function(rootNode) {\r\n\t\tvar userOptionsTitle = $('<h2></h2>').text(CONST.TEXT.USER_OPTION_PANEL);\r\n\t\trootNode.append(userOptionsTitle);\r\n\t};\r\n\r\n\tvar drawOptionsForm = function(rootNode) {\r\n\t\tvar howManyPicturesLabel = $('<label></label>').text(CONST.TEXT.PICTURE_NUMBER);\r\n\t\tvar howManyPictures = $('<input type=\"text\">');\r\n\t\thowManyPicturesLabel.append(howManyPictures);\r\n\t\trootNode.append(howManyPicturesLabel);\r\n\t};\r\n\r\n\tvar drawFooter = function(rootNode) {\r\n\t\tvar closeButton = $('<button></button>').text(CONST.TEXT.CLOSE);\r\n\t\tcloseButton.click(function(){\r\n\t\t\tself.container.hide();\r\n\t\t\tnew memoryCardGame.GameManager();\r\n\t\t});\r\n\t\trootNode.append(closeButton);\r\n\t};\r\n\r\n\tinit.call(this);\r\n\r\n};\r\n\r\n"],"sourceRoot":"."}