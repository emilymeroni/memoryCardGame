{"version":3,"sources":["core.js","utils.js","Deck.js","Card.js","Stats.js","GameManager.js","UserOptions.js"],"names":["window","memoryCardGame","utils","persistInLocalStorage","data","localStorage","setItem","JSON","stringify","addDataInLocalStorage","persistedData","retrieveFromLocalStorage","mergedData","$","extend","parse","getItem","getFromLocalStorage","key","Deck","params","luga","Notifier","this","CONST","CSS","ROOT","SINGLE_CARD_CLASS","CARD_COPIES","TIME_FOR_FLIP","IMAGE_BASE_URL","EVENT","HAND_FINISHED","HAND_INVALID","CARDS_ALL_FLIPPED","HTML","DECK","config","cardList","cards","flippedCards","container","addClass","self","init","setupCards","shuffleCards","drawCards","each","val","j","card","Card","id","length","image","addObserver","push","sort","Math","random","i","append","getPreviousFlippedCard","isNewHandStarted","isHandFinished","isAllCardsFlipped","setDiscoveredCards","setDiscovered","coverLatestHandFlippedCards","setTimeout","getCardNodeAndFlip","pop","onSelectedCardHandler","getImage","notifyObservers","call","DATA","CARD_ID","CARD_NODE","IMAGE_NODE","SELECTED_CARD","flipped","discovered","imageNode","attr","attachEvents","click","flip","cardNode","getImageNode","find","remove","Stats","BEST_SCORE","BEST_SCORE_TEXT","BEST_SCORE_NUMBER","ATTEMPTS","ATTEMPTS_TEXT","ATTEMPTS_NUMBER","SELECTOR","TEXT","attempts","attemptsNumber","bestScoreNumber","draw","currentMoves","attemptsText","text","bestScoreCounter","bestScore","bestScoreText","updateAttemptsCounter","saveStats","undefined","GameManager","GAME_CONTAINER","BOARD_CLASS","TIMER_CLASS","TIMER_SELECTOR","TIMER","rootNode","cardThemesData","deck","stats","timerInterval","timer","gameContainer","getCardThemesData","cardThemesList","getCardThemesList","userOptions","UserOptions","ajaxSetup","async","getJSON","cardThemesJson","startGame","selectedTheme","cardsClass","singleCardClass","startTimer","empty","endGame","clearInterval","timerContainer","setInterval","onChosenOptionsHandler","onHandFinishedHandler","onHandInvalidHandler","onCardsAllFlippedHandler","OPTION_PANEL_CLASS","CHOSEN_OPTIONS","CARD_THEME","PICTURE_NUMBER","USER_OPTION_PANEL","CLOSE","userOptionsPanel","drawHeader","drawOptionsForm","drawFooter","userOptionsTitle","drawCardThemeForm","cardTemeText","option","cardTheme","toUpperCase","closeButton","hide"],"mappings":"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","file":"memoryCardGame.min.js","sourcesContent":["window.memoryCardGame = {};","/* global $, memoryCardGame */\r\n\r\nwindow.memoryCardGame.utils = {};\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    memoryCardGame.utils.persistInLocalStorage = function (data) {\r\n        localStorage.setItem('memoryCardGame', JSON.stringify(data));\r\n    };\r\n\r\n    memoryCardGame.utils.addDataInLocalStorage = function (data) {\r\n        var persistedData = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        var mergedData = $.extend({}, persistedData, data);\r\n        memoryCardGame.utils.persistInLocalStorage(mergedData);\r\n    };\r\n\r\n    memoryCardGame.utils.retrieveFromLocalStorage = function () {\r\n        return JSON.parse(localStorage.getItem('memoryCardGame'));\r\n    };\r\n\r\n    memoryCardGame.utils.getFromLocalStorage = function (key) {\r\n        var persistedData = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        if(persistedData !== null) {\r\n            return persistedData[key];\r\n        }\r\n    };\r\n})();\r\n","memoryCardGame.Deck = function (params) {\r\n\r\n    'use strict';\r\n\r\n    luga.extend(luga.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-cards',\r\n            SINGLE_CARD_CLASS: 'memory-card'\r\n        },\r\n        CARD_COPIES: 2,\r\n        TIME_FOR_FLIP: 500,\r\n        IMAGE_BASE_URL: 'src\\\\cardthemes',\r\n        EVENT: {\r\n            HAND_FINISHED: 'handFinished',\r\n            HAND_INVALID: 'handInvalid',\r\n            CARDS_ALL_FLIPPED: 'cardsAllFlipped'\r\n        },\r\n        HTML: {\r\n            DECK: '<ul></ul>'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        cardList: null\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var cards = [];\r\n\r\n    var flippedCards = [];\r\n\r\n    this.container = $(CONST.HTML.DECK).addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        setupCards();\r\n        shuffleCards();\r\n        drawCards();\r\n    };\r\n\r\n    var setupCards = function () {\r\n        $.each(config.cardList, function (key, val) {\r\n            for (var j = 0; j < CONST.CARD_COPIES; j++) {\r\n\r\n                var card = new memoryCardGame.Card({\r\n                    id: cards.length,\r\n                    image: CONST.IMAGE_BASE_URL + '\\\\' + val\r\n                });\r\n                card.addObserver(self);\r\n                cards.push(card);\r\n            }\r\n        });\r\n    };\r\n\r\n    var shuffleCards = function () {\r\n        cards = cards.sort(function () {\r\n            return 0.5 - Math.random();\r\n        });\r\n    };\r\n\r\n    var drawCards = function () {\r\n        for (var i = 0; i < cards.length; i++) {\r\n            self.container.append(cards[i].container);\r\n        }\r\n    };\r\n\r\n    var getPreviousFlippedCard = function () {\r\n        return flippedCards[flippedCards.length - 2];\r\n    };\r\n\r\n    var isNewHandStarted = function () {\r\n        return flippedCards.length % CONST.CARD_COPIES === 1;\r\n    };\r\n\r\n    var isHandFinished = function () {\r\n        return flippedCards.length % CONST.CARD_COPIES === 0;\r\n    };\r\n\r\n    var isAllCardsFlipped = function () {\r\n        return flippedCards.length === cards.length;\r\n    };\r\n\r\n    var setDiscoveredCards = function () {\r\n        for (var i = 1; i <= CONST.CARD_COPIES; i++) {\r\n            flippedCards[flippedCards.length - i].setDiscovered();\r\n        }\r\n    };\r\n\r\n    var coverLatestHandFlippedCards = function () {\r\n        setTimeout(function () {\r\n            for (var i = 0; i < CONST.CARD_COPIES; i++) {\r\n                flippedCards[flippedCards.length - 1].getCardNodeAndFlip();\r\n                flippedCards.pop();\r\n            }\r\n        }, CONST.TIME_FOR_FLIP);\r\n    };\r\n\r\n    this.onSelectedCardHandler = function (data) {\r\n        var card = data.card;\r\n        flippedCards.push(card);\r\n        if (isNewHandStarted()) {\r\n            return;\r\n        }\r\n        if (getPreviousFlippedCard().getImage() === card.getImage()) {\r\n            if (isHandFinished()) {\r\n                setDiscoveredCards();\r\n                self.notifyObservers(CONST.EVENT.HAND_FINISHED, {});\r\n                if (isAllCardsFlipped()) {\r\n                    self.notifyObservers(CONST.EVENT.CARDS_ALL_FLIPPED, {});\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            coverLatestHandFlippedCards();\r\n            self.notifyObservers(CONST.EVENT.HAND_INVALID, {});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n\r\n};\r\n\r\n","memoryCardGame.Card = function (params) {\r\n    'use strict';\r\n\r\n    luga.extend(luga.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-card'\r\n        },\r\n        DATA: {\r\n            CARD_ID: 'data-card-id'\r\n        },\r\n        HTML: {\r\n            CARD_NODE: '<li></li>',\r\n            IMAGE_NODE: '<img>'\r\n        },\r\n        EVENT: {\r\n            SELECTED_CARD: 'selectedCard'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        id: null,\r\n        flipped: false,\r\n        image: null\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var discovered = false;\r\n\r\n    var imageNode = $(CONST.HTML.IMAGE_NODE);\r\n\r\n    this.container = $(CONST.HTML.CARD_NODE).addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        self.container.attr(CONST.DATA.CARD_ID, config.id);\r\n        attachEvents();\r\n    };\r\n\r\n    var attachEvents = function () {\r\n        self.container.click(function () {\r\n            if (config.flipped === false) {\r\n                flip(self.container);\r\n                if (discovered === false) {\r\n                    self.notifyObservers(CONST.EVENT.SELECTED_CARD, {\r\n                        card: self\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    var flip = function (cardNode) {\r\n        config.flipped = !config.flipped;\r\n\r\n        if (config.flipped === true) {\r\n            cardNode.append(getImageNode());\r\n        }\r\n        else {\r\n            cardNode.find(imageNode).remove();\r\n        }\r\n    };\r\n\r\n    var getImageNode = function () {\r\n        imageNode.attr('src', config.image);\r\n        return imageNode;\r\n    };\r\n\r\n    this.getCardNodeAndFlip = function () {\r\n        var cardNode = $('.' + CONST.CSS.ROOT + '[' + CONST.DATA.CARD_ID + '=' + config.id + ']');\r\n        flip(cardNode);\r\n    };\r\n\r\n    this.getImage = function () {\r\n        return config.image;\r\n    };\r\n\r\n    this.setDiscovered = function () {\r\n        discovered = true;\r\n    };\r\n\r\n    init.call(this);\r\n};\r\n\r\n","memoryCardGame.Stats = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'current-stats-container',\r\n            BEST_SCORE: 'best-score',\r\n            BEST_SCORE_TEXT: 'best-score-text',\r\n            BEST_SCORE_NUMBER: 'best-score-number',\r\n            ATTEMPTS: 'attempts',\r\n            ATTEMPTS_TEXT: 'attempts-text',\r\n            ATTEMPTS_NUMBER: 'attempts-number'\r\n        },\r\n        SELECTOR: {\r\n            ATTEMPTS_NUMBER: '.attempts-number'\r\n        },\r\n        TEXT: {\r\n            ATTEMPTS: 'Attempts: ',\r\n            BEST_SCORE: 'Best score: '\r\n        }\r\n    };\r\n\r\n    var config = {};\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var attempts = 0;\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    var attemptsNumber = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_NUMBER);\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    var bestScoreNumber = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_NUMBER);\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    this.container = $('<div></div>').addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        draw();\r\n    };\r\n\r\n    var draw = function () {\r\n\r\n        var currentMoves = $('<div></div>').addClass(CONST.CSS.ATTEMPTS);\r\n        var attemptsText = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_TEXT).text(CONST.TEXT.ATTEMPTS);\r\n        attemptsNumber.text(attempts);\r\n\r\n        currentMoves.append(attemptsText);\r\n        currentMoves.append(attemptsNumber);\r\n\r\n        self.container.append(currentMoves);\r\n\r\n        var bestScoreCounter = memoryCardGame.utils.getFromLocalStorage('bestScoreCounter');\r\n\r\n        if (bestScoreCounter) {\r\n            var bestScore = $('<div></div>').addClass(CONST.CSS.BEST_SCORE);\r\n            var bestScoreText = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_TEXT).text(CONST.TEXT.BEST_SCORE);\r\n            bestScoreNumber.text(bestScoreCounter);\r\n\r\n            bestScore.append(bestScoreText);\r\n            bestScore.append(bestScoreNumber);\r\n            self.container.append(bestScore);\r\n        }\r\n    };\r\n\r\n    this.updateAttemptsCounter = function () {\r\n        attempts++;\r\n        attemptsNumber.text(attempts);\r\n    };\r\n\r\n    this.saveStats = function () {\r\n        var bestScoreCounter = memoryCardGame.utils.getFromLocalStorage('bestScoreCounter');\r\n        if ((bestScoreCounter === undefined || attempts < bestScoreCounter)) {\r\n            memoryCardGame.utils.addDataInLocalStorage({bestScoreCounter: attempts});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n};\r\n\r\n","memoryCardGame.GameManager = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-card-game',\r\n            GAME_CONTAINER: 'game-container',\r\n            BOARD_CLASS: 'memory-board',\r\n            TIMER_CLASS: 'timer'\r\n        },\r\n        SELECTOR: {\r\n            TIMER_SELECTOR: '.timer'\r\n        },\r\n        TIMER: 1000\r\n    };\r\n\r\n    var config = {\r\n        rootNode: $('body')\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var cardThemesData;\r\n\r\n    var deck;\r\n\r\n    var stats;\r\n\r\n    var timer = 0;\r\n\r\n    var timerInterval;\r\n\r\n    var gameContainer = $('<div></div>').addClass(CONST.CSS.GAME_CONTAINER);\r\n\r\n    this.container = $('<div></div>').addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        cardThemesData = getCardThemesData();\r\n        var cardThemesList = getCardThemesList();\r\n        var userOptions = new memoryCardGame.UserOptions(cardThemesList);\r\n        userOptions.addObserver(self);\r\n        self.container.append(userOptions.container);\r\n        config.rootNode.append(self.container);\r\n    };\r\n\r\n    var getCardThemesData = function () {\r\n        $.ajaxSetup({\r\n            async: false\r\n        });\r\n\r\n        $.getJSON('dist/themes.json', function (cardThemesJson) {\r\n            return cardThemesJson;\r\n        });\r\n\r\n        $.ajaxSetup({\r\n            async: true\r\n        });\r\n    };\r\n\r\n    var getCardThemesList = function () {\r\n        var cardThemesList = [];\r\n\r\n        $.each(cardThemesData, function (key, val) {\r\n            cardThemesList.push(val);\r\n        });\r\n\r\n        return cardThemesList;\r\n    };\r\n\r\n    var startGame = function (selectedTheme) {\r\n        stats = new memoryCardGame.Stats();\r\n        gameContainer.append(stats.container);\r\n\r\n        deck = new memoryCardGame.Deck({\r\n            cardsClass: config.cardsClass,\r\n            singleCardClass: config.singleCardClass,\r\n            cardList: cardThemesData[selectedTheme]\r\n        });\r\n        deck.addObserver(self);\r\n        gameContainer.append(deck.container);\r\n\r\n        startTimer();\r\n\r\n        self.container.empty().append(gameContainer);\r\n        config.rootNode.append(self.container);\r\n    };\r\n\r\n    var endGame = function () {\r\n        stats.saveStats();\r\n        clearInterval(timerInterval);\r\n    };\r\n\r\n    var startTimer = function () {\r\n        var timerContainer = $('<div></div>').addClass(CONST.CSS.TIMER_CLASS);\r\n        gameContainer.append(timerContainer.text(timer));\r\n        timerInterval = setInterval(function () {\r\n            timerContainer.text(++timer);\r\n        }, CONST.TIMER);\r\n    };\r\n\r\n    this.onChosenOptionsHandler = function (data) {\r\n        startGame(data.selectedTheme);\r\n    };\r\n\r\n    this.onHandFinishedHandler = function () {\r\n        stats.updateAttemptsCounter();\r\n    };\r\n\r\n    this.onHandInvalidHandler = function () {\r\n        stats.updateAttemptsCounter();\r\n    };\r\n\r\n    this.onCardsAllFlippedHandler = function () {\r\n        endGame();\r\n    };\r\n\r\n    init.call(this);\r\n};","memoryCardGame.UserOptions = function (params) {\r\n\r\n    'use strict';\r\n\r\n    luga.extend(luga.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'user-options-wrapper',\r\n            OPTION_PANEL_CLASS: 'user-options-panel'\r\n        },\r\n        EVENT: {\r\n            CHOSEN_OPTIONS: 'chosenOptions'\r\n        },\r\n        TEXT: {\r\n            CARD_THEME: 'Card theme:',\r\n            PICTURE_NUMBER: 'Number of pictures:',\r\n            USER_OPTION_PANEL: 'User option panel',\r\n            CLOSE: 'Close'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        cardThemesList: null\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var self = this;\r\n\r\n    self.container = $('<div></div>').addClass(CONST.CSS.ROOT);\r\n\r\n    var init = function () {\r\n        draw();\r\n    };\r\n\r\n    var draw = function () {\r\n        //TODO: Create utils library for dom elements\r\n        var userOptionsPanel = $('<div></div>').addClass(CONST.CSS.OPTION_PANEL_CLASS);\r\n        drawHeader(userOptionsPanel);\r\n        drawOptionsForm(userOptionsPanel);\r\n        drawFooter(userOptionsPanel);\r\n        self.container.append(userOptionsPanel);\r\n    };\r\n\r\n    var drawHeader = function (rootNode) {\r\n        var userOptionsTitle = $('<h2></h2>').text(CONST.TEXT.USER_OPTION_PANEL);\r\n        rootNode.append(userOptionsTitle);\r\n    };\r\n\r\n    var drawOptionsForm = function (rootNode) {\r\n        drawCardThemeForm(rootNode);\r\n    };\r\n\r\n    var drawHowManyPicturesForm = function (rootNode) {\r\n        var howManyPicturesLabel = $('<label></label>').text(CONST.TEXT.PICTURE_NUMBER);\r\n        var howManyPictures = $('<input type=\"text\">');\r\n        howManyPicturesLabel.append(howManyPictures);\r\n        rootNode.append(howManyPicturesLabel);\r\n    };\r\n\r\n    //TODO: Put some picture preview\r\n    var drawCardThemeForm = function (rootNode) {\r\n        var cardTemeText = $('<span></span>').text(CONST.TEXT.CARD_THEME);\r\n        rootNode.append(cardTemeText);\r\n\r\n        for (var i = 0; i < config.cardThemesList.length; i++) {\r\n            var option = $('<label><input name=\"theme\" type=\"radio\"></label>');\r\n            var cardTheme = config.cardThemesList[i];\r\n            option.val(cardTheme);\r\n            option.text(cardTheme.toUpperCase());\r\n            rootNode.append(option);\r\n        }\r\n    };\r\n\r\n    var drawFooter = function (rootNode) {\r\n        var closeButton = $('<button></button>').text(CONST.TEXT.CLOSE);\r\n        closeButton.click(function () {\r\n            self.container.hide();\r\n            var selectedTheme = $('input:radio[name=\\'theme\\']:checked').val();\r\n            self.notifyObservers(CONST.EVENT.CHOSEN_OPTIONS, {\r\n                selectedTheme: selectedTheme\r\n            });\r\n        });\r\n        rootNode.append(closeButton);\r\n    };\r\n\r\n    init.call(this);\r\n\r\n};\r\n\r\n"],"sourceRoot":"."}