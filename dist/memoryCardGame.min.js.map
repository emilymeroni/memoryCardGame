{"version":3,"sources":["core.js","utils.js","Deck.js","Card.js","Stats.js","GameManager.js","UserOptions.js"],"names":["window","memoryCardGame","utils","persistInLocalStorage","data","localStorage","setItem","JSON","stringify","addDataInLocalStorage","persistedData","retrieveFromLocalStorage","mergedData","$","extend","parse","getItem","Deck","params","luga","Notifier","this","CONST","CSS","ROOT","SINGLE_CARD_CLASS","CARD_COPIES","TIME_FOR_FLIP","DEFAULT_IMAGES","IMAGE_BASE_URL","EVENT","HAND_FINISHED","HAND_INVALID","CARDS_ALL_FLIPPED","HTML","DECK","config","cards","flippedCards","imageMap","container","addClass","self","init","concat","createCards","shuffleCards","drawCards","i","length","j","card","Card","id","image","addObserver","push","sort","Math","random","append","getPreviousFlippedCard","isNewHandStarted","isHandFinished","isAllCardsFlipped","setDiscoveredCards","setDiscovered","coverLatestHandFlippedCards","setTimeout","getCardNodeAndFlip","pop","onSelectedCardHandler","getImage","notifyObservers","call","DATA","CARD_ID","CARD_NODE","IMAGE_NODE","SELECTED_CARD","flipped","discovered","imageNode","attr","attachEvents","click","flip","cardNode","getImageNode","find","remove","Stats","BEST_SCORE","BEST_SCORE_TEXT","BEST_SCORE_NUMBER","ATTEMPTS","ATTEMPTS_TEXT","ATTEMPTS_NUMBER","SELECTOR","TEXT","bestScoreCounter","attempts","attemptsNumber","bestScoreNumber","draw","currentMoves","attemptsText","text","bestScore","bestScoreText","updateAttemptsCounter","saveStats","GameManager","BOARD_CLASS","TIMER_CLASS","CONTAINER","TIMER_SELECTOR","TIMER","gameContainer","deck","stats","timerInterval","timer","persistentData","memoryLocalStorage","cardsClass","singleCardClass","startTimer","endGame","clearInterval","setInterval","onHandFinishedHandler","onHandInvalidHandler","onCardsAllFlippedHandler","UserOptions","USER_OPTIONS_WRAPPER","OPTION_PANEL_CLASS","PICTURE_NUMBER","USER_OPTION_PANEL","CLOSE","cardCopies","userOptionsPanel","drawHeader","drawOptionsForm","drawFooter","rootNode","userOptionsTitle","howManyPicturesLabel","howManyPictures","closeButton","hide"],"mappings":"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","file":"memoryCardGame.min.js","sourcesContent":["window.memoryCardGame = {};","/* global $, memoryCardGame */\r\n\r\nwindow.memoryCardGame.utils = {};\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    memoryCardGame.utils.persistInLocalStorage = function (data) {\r\n        localStorage.setItem('memoryCardGame', JSON.stringify(data));\r\n    };\r\n\r\n    memoryCardGame.utils.addDataInLocalStorage = function (data) {\r\n        var persistedData = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        var mergedData = $.extend({}, persistedData, data);\r\n        memoryCardGame.utils.persistInLocalStorage(mergedData);\r\n    };\r\n\r\n    memoryCardGame.utils.retrieveFromLocalStorage = function () {\r\n        return JSON.parse(localStorage.getItem('memoryCardGame'));\r\n    };\r\n})();\r\n","memoryCardGame.Deck = function (params) {\r\n\r\n    'use strict';\r\n\r\n    luga.extend(luga.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-cards',\r\n            SINGLE_CARD_CLASS: 'memory-card'\r\n        },\r\n        CARD_COPIES: 2,\r\n        TIME_FOR_FLIP: 500,\r\n        DEFAULT_IMAGES: [\r\n            'Hydrangeas.jpg',\r\n            'Jellyfish.jpg',\r\n            'Koala.jpg',\r\n            'Penguins.jpg',\r\n            'Tulips.jpg'\r\n        ],\r\n        IMAGE_BASE_URL: 'src\\\\images',\r\n        EVENT: {\r\n            HAND_FINISHED: 'handFinished',\r\n            HAND_INVALID: 'handInvalid',\r\n            CARDS_ALL_FLIPPED: 'cardsAllFlipped'\r\n        },\r\n        HTML: {\r\n            DECK: '<ul></ul>'\r\n        }\r\n    };\r\n\r\n    var config = {};\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var cards = [];\r\n\r\n    var flippedCards = [];\r\n\r\n    var imageMap = [];\r\n\r\n    this.container = $(CONST.HTML.DECK).addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        imageMap = imageMap.concat(CONST.DEFAULT_IMAGES);\r\n        createCards();\r\n        shuffleCards();\r\n        drawCards();\r\n    };\r\n\r\n    var createCards = function () {\r\n        for (var i = 0; i < imageMap.length; i++) {\r\n            for (var j = 0; j < CONST.CARD_COPIES; j++) {\r\n                var card = new memoryCardGame.Card({\r\n                    id: cards.length,\r\n                    image: CONST.IMAGE_BASE_URL + '\\\\' + imageMap[i]\r\n                });\r\n                card.addObserver(self);\r\n                cards.push(card);\r\n            }\r\n        }\r\n    };\r\n\r\n    var shuffleCards = function () {\r\n        cards = cards.sort(function () {\r\n            return 0.5 - Math.random();\r\n        });\r\n    };\r\n\r\n    var drawCards = function () {\r\n        for (var i = 0; i < cards.length; i++) {\r\n            self.container.append(cards[i].container);\r\n        }\r\n    };\r\n\r\n    var getPreviousFlippedCard = function () {\r\n        return flippedCards[flippedCards.length - 2];\r\n    };\r\n\r\n    var isNewHandStarted = function () {\r\n        return flippedCards.length % CONST.CARD_COPIES === 1;\r\n    };\r\n\r\n    var isHandFinished = function () {\r\n        return flippedCards.length % CONST.CARD_COPIES === 0;\r\n    };\r\n\r\n    var isAllCardsFlipped = function () {\r\n        return flippedCards.length === cards.length;\r\n    };\r\n\r\n    var setDiscoveredCards = function () {\r\n        for (var i = 1; i <= CONST.CARD_COPIES; i++) {\r\n            flippedCards[flippedCards.length - i].setDiscovered();\r\n        }\r\n    };\r\n\r\n    var coverLatestHandFlippedCards = function () {\r\n        setTimeout(function () {\r\n            for (var i = 0; i < CONST.CARD_COPIES; i++) {\r\n                flippedCards[flippedCards.length - 1].getCardNodeAndFlip();\r\n                flippedCards.pop();\r\n            }\r\n        }, CONST.TIME_FOR_FLIP);\r\n    };\r\n\r\n    this.onSelectedCardHandler = function (data) {\r\n        var card = data.card;\r\n        flippedCards.push(card);\r\n        if (isNewHandStarted()) {\r\n            return;\r\n        }\r\n        if (getPreviousFlippedCard().getImage() === card.getImage()) {\r\n            if (isHandFinished()) {\r\n                setDiscoveredCards();\r\n                self.notifyObservers(CONST.EVENT.HAND_FINISHED, {});\r\n                if (isAllCardsFlipped()) {\r\n                    self.notifyObservers(CONST.EVENT.CARDS_ALL_FLIPPED, {});\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            coverLatestHandFlippedCards();\r\n            self.notifyObservers(CONST.EVENT.HAND_INVALID, {});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n\r\n};\r\n\r\n","memoryCardGame.Card = function (params) {\r\n    'use strict';\r\n\r\n    luga.extend(luga.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-card'\r\n        },\r\n        DATA: {\r\n            CARD_ID: 'data-card-id'\r\n        },\r\n        HTML: {\r\n            CARD_NODE: '<li></li>',\r\n            IMAGE_NODE: '<img>'\r\n        },\r\n        EVENT: {\r\n            SELECTED_CARD: 'selectedCard'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        id: null,\r\n        flipped: false,\r\n        image: null\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var discovered = false;\r\n\r\n    var imageNode = $(CONST.HTML.IMAGE_NODE);\r\n\r\n    this.container = $(CONST.HTML.CARD_NODE).addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        self.container.attr(CONST.DATA.CARD_ID, config.id);\r\n        attachEvents();\r\n    };\r\n\r\n    var attachEvents = function () {\r\n        self.container.click(function () {\r\n            if (config.flipped === false) {\r\n                flip(self.container);\r\n                if (discovered === false) {\r\n                    self.notifyObservers(CONST.EVENT.SELECTED_CARD, {\r\n                        card: self\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    var flip = function (cardNode) {\r\n        config.flipped = !config.flipped;\r\n\r\n        if (config.flipped === true) {\r\n            cardNode.append(getImageNode());\r\n        }\r\n        else {\r\n            cardNode.find(imageNode).remove();\r\n        }\r\n    };\r\n\r\n    var getImageNode = function () {\r\n        imageNode.attr('src', config.image);\r\n        return imageNode;\r\n    };\r\n\r\n    this.getCardNodeAndFlip = function () {\r\n        var cardNode = $('.' + CONST.CSS.ROOT + '[' + CONST.DATA.CARD_ID + '=' + config.id + ']');\r\n        flip(cardNode);\r\n    };\r\n\r\n    this.getImage = function () {\r\n        return config.image;\r\n    };\r\n\r\n    this.setDiscovered = function () {\r\n        discovered = true;\r\n    };\r\n\r\n    init.call(this);\r\n};\r\n\r\n","memoryCardGame.Stats = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'current-stats-container',\r\n            BEST_SCORE: 'best-score',\r\n            BEST_SCORE_TEXT: 'best-score-text',\r\n            BEST_SCORE_NUMBER: 'best-score-number',\r\n            ATTEMPTS: 'attempts',\r\n            ATTEMPTS_TEXT: 'attempts-text',\r\n            ATTEMPTS_NUMBER: 'attempts-number'\r\n        },\r\n        SELECTOR: {\r\n            ATTEMPTS_NUMBER: '.attempts-number'\r\n        },\r\n        TEXT: {\r\n            ATTEMPTS: 'Attempts: ',\r\n            BEST_SCORE: 'Best score: '\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        bestScoreCounter: null,\r\n        attempts: 0\r\n\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    var attemptsNumber = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_NUMBER);\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    var bestScoreNumber = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_NUMBER);\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    this.container = $('<div></div>').addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        draw();\r\n    };\r\n\r\n    var draw = function () {\r\n\r\n        var currentMoves = $('<div></div>').addClass(CONST.CSS.ATTEMPTS);\r\n        var attemptsText = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_TEXT).text(CONST.TEXT.ATTEMPTS);\r\n       attemptsNumber.text(config.attempts);\r\n\r\n        currentMoves.append(attemptsText);\r\n        currentMoves.append(attemptsNumber);\r\n\r\n        self.container.append(currentMoves);\r\n\r\n        if (config.bestScoreCounter !== null) {\r\n            var bestScore = $('<div></div>').addClass(CONST.CSS.BEST_SCORE);\r\n            var bestScoreText = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_TEXT).text(CONST.TEXT.BEST_SCORE);\r\n            bestScoreNumber.text(config.bestScoreCounter);\r\n\r\n            bestScore.append(bestScoreText);\r\n            bestScore.append(bestScoreNumber);\r\n            self.container.append(bestScore);\r\n        }\r\n    };\r\n\r\n    this.updateAttemptsCounter = function () {\r\n        config.attempts++;\r\n        attemptsNumber.text(config.attempts);\r\n    };\r\n\r\n    this.saveStats = function () {\r\n        if ((config.bestScoreCounter === null || config.attempts < config.bestScoreCounter)) {\r\n            memoryCardGame.utils.addDataInLocalStorage({bestScoreCounter: config.attempts});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n};\r\n\r\n","memoryCardGame.GameManager = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-card-game',\r\n            BOARD_CLASS: 'memory-board',\r\n            TIMER_CLASS: 'timer'\r\n        },\r\n        SELECTOR: {\r\n            CONTAINER: 'body',\r\n            TIMER_SELECTOR: '.timer'\r\n        },\r\n        TIMER: 1000\r\n    };\r\n\r\n    var config = {\r\n        gameContainer: CONST.SELECTOR.CONTAINER\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var deck;\r\n\r\n    var stats;\r\n\r\n    var timer = 0;\r\n\r\n    var timerInterval;\r\n\r\n    var persistentData = {\r\n        bestScoreCounter: null\r\n    };\r\n\r\n    this.container = $('<div></div>').addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        var memoryLocalStorage = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        if (memoryLocalStorage !== null) {\r\n            persistentData = memoryLocalStorage;\r\n        }\r\n\r\n        stats = new memoryCardGame.Stats({\r\n            bestScoreCounter: persistentData.bestScoreCounter\r\n        });\r\n        self.container.append(stats.container);\r\n\r\n        deck = new memoryCardGame.Deck({\r\n            cardsClass: config.cardsClass,\r\n            singleCardClass: config.singleCardClass\r\n        });\r\n        deck.addObserver(self);\r\n        self.container.append(deck.container);\r\n\r\n        startTimer();\r\n\r\n        $(config.gameContainer).append(self.container);\r\n    };\r\n\r\n    var endGame = function () {\r\n        stats.saveStats();\r\n        clearInterval(timerInterval);\r\n    };\r\n\r\n    var startTimer = function () {\r\n        self.container.append($('<div></div>').addClass(CONST.CSS.TIMER_CLASS).text(timer));\r\n        timerInterval = setInterval(function () {\r\n            $(CONST.SELECTOR.TIMER_SELECTOR).text(++timer);\r\n        }, CONST.TIMER);\r\n    };\r\n\r\n    this.onHandFinishedHandler = function () {\r\n        stats.updateAttemptsCounter();\r\n    };\r\n\r\n    this.onHandInvalidHandler = function () {\r\n        stats.updateAttemptsCounter();\r\n    };\r\n\r\n    this.onCardsAllFlippedHandler = function () {\r\n        endGame();\r\n    };\r\n\r\n    init.call(this);\r\n};","memoryCardGame.UserOptions = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            USER_OPTIONS_WRAPPER: 'user-options-wrapper',\r\n            OPTION_PANEL_CLASS: 'user-options-panel'\r\n        },\r\n        TEXT: {\r\n            PICTURE_NUMBER: 'Number of pictures:',\r\n            USER_OPTION_PANEL: 'User option panel',\r\n            CLOSE: 'Close'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        cardCopies: null\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var self = this;\r\n\r\n    self.container = $('<div></div>').addClass(CONST.CSS.USER_OPTIONS_WRAPPER);\r\n\r\n    var init = function () {\r\n        draw();\r\n    };\r\n\r\n    var draw = function () {\r\n        //TODO: Create utils library for dom elements\r\n        var userOptionsPanel = $('<div></div>').addClass(CONST.CSS.OPTION_PANEL_CLASS);\r\n        drawHeader(userOptionsPanel);\r\n        drawOptionsForm(userOptionsPanel);\r\n        drawFooter(userOptionsPanel);\r\n        self.container.append(userOptionsPanel);\r\n        //TODO: Create a global class for memoryGame and append panel to it\r\n        $('body').append(self.container);\r\n    };\r\n\r\n    var drawHeader = function (rootNode) {\r\n        var userOptionsTitle = $('<h2></h2>').text(CONST.TEXT.USER_OPTION_PANEL);\r\n        rootNode.append(userOptionsTitle);\r\n    };\r\n\r\n    var drawOptionsForm = function (rootNode) {\r\n        var howManyPicturesLabel = $('<label></label>').text(CONST.TEXT.PICTURE_NUMBER);\r\n        var howManyPictures = $('<input type=\"text\">');\r\n        howManyPicturesLabel.append(howManyPictures);\r\n        rootNode.append(howManyPicturesLabel);\r\n    };\r\n\r\n    var drawFooter = function (rootNode) {\r\n        var closeButton = $('<button></button>').text(CONST.TEXT.CLOSE);\r\n        closeButton.click(function () {\r\n            self.container.hide();\r\n            new memoryCardGame.GameManager();\r\n        });\r\n        rootNode.append(closeButton);\r\n    };\r\n\r\n    init.call(this);\r\n\r\n};\r\n\r\n"],"sourceRoot":"."}