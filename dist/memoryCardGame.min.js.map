{"version":3,"sources":["core.js","utils.js","Deck.js","Card.js","Stats.js","GameManager.js","UserOptions.js"],"names":["window","memoryCardGame","utils","persistInLocalStorage","data","localStorage","setItem","JSON","stringify","addDataInLocalStorage","persistedData","retrieveFromLocalStorage","mergedData","$","extend","parse","getItem","Deck","params","CONST","CSS","ROOT","SINGLE_CARD_CLASS","CARD_COPIES","TIME_FOR_FLIP","DEFAULT_IMAGES","IMAGE_BASE_URL","config","gameManager","cardsClass","CARDS_CLASS","singleCardClass","cards","flippedCards","imageMap","this","container","addClass","self","init","concat","createCards","shuffleCards","drawCards","i","length","j","card","Card","id","image","push","sort","Math","random","cardNode","getNode","append","getPreviousFlippedCard","addFlippedCard","isNewHandStarted","getFlippedCardsNumber","isHandFinished","isAllCardsFlipped","getCardsNumber","setDiscoveredCards","setDiscovered","coverLatestHandFlippedCards","setTimeout","getCardNodeAndFlip","pop","call","DATA","CARD_ID","HTML","CARD_NODE","IMAGE_NODE","flipped","discovered","imageNode","flip","getImageNode","find","remove","getImage","attr","click","onCardSelected","Stats","BEST_SCORE","BEST_SCORE_TEXT","BEST_SCORE_NUMBER","ATTEMPTS","ATTEMPTS_TEXT","ATTEMPTS_NUMBER","SELECTOR","TEXT","bestScoreCounter","attempts","draw","currentMoves","attemptsText","text","attemptsNumber","bestScore","bestScoreText","bestScoreNumber","updateAttemptsCounter","saveStats","GameManager","BOARD_CLASS","gameClass","deck","stats","timer","persistentData","memoryLocalStorage","startTimer","endGame","setInterval","isGameEnded","UserOptions","USER_OPTIONS_WRAPPER","OPTION_PANEL_CLASS","PICTURE_NUMBER","USER_OPTION_PANEL","CLOSE","cardCopies","userOptionsPanel","drawHeader","drawOptionsForm","drawFooter","rootNode","userOptionsTitle","howManyPicturesLabel","howManyPictures","closeButton","hide"],"mappings":"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","file":"memoryCardGame.min.js","sourcesContent":["window.memoryCardGame = {};","/* global $, memoryCardGame */\r\n\r\nwindow.memoryCardGame.utils = {};\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    memoryCardGame.utils.persistInLocalStorage = function (data) {\r\n        localStorage.setItem('memoryCardGame', JSON.stringify(data));\r\n    };\r\n\r\n    memoryCardGame.utils.addDataInLocalStorage = function (data) {\r\n        var persistedData = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        var mergedData = $.extend({}, persistedData, data);\r\n        memoryCardGame.utils.persistInLocalStorage(mergedData);\r\n    };\r\n\r\n        memoryCardGame.utils.retrieveFromLocalStorage = function () {\r\n        return JSON.parse(localStorage.getItem('memoryCardGame'));\r\n    };\r\n})();\r\n","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.Deck = function(params){\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-cards',\r\n            SINGLE_CARD_CLASS: 'memory-card'\r\n        },\r\n        CARD_COPIES: 2,\r\n        TIME_FOR_FLIP: 500,\r\n        DEFAULT_IMAGES: [\r\n            'Hydrangeas.jpg',\r\n            'Jellyfish.jpg',\r\n            'Koala.jpg',\r\n            'Penguins.jpg',\r\n            'Tulips.jpg'\r\n        ],\r\n        IMAGE_BASE_URL: 'src\\\\images'\r\n    };\r\n\r\n    var config = {\r\n        gameManager: null,\r\n        cardsClass: CONST.CSS.CARDS_CLASS,\r\n        singleCardClass: CONST.CSS.SINGLE_CARD_CLASS\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var cards = [];\r\n\r\n    var flippedCards = [];\r\n\r\n    var imageMap = [];\r\n\r\n    this.container = $('<ul></ul>').addClass(config.cardsClass);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        imageMap = imageMap.concat(CONST.DEFAULT_IMAGES);\r\n        createCards();\r\n        shuffleCards();\r\n        drawCards();\r\n    };\r\n\r\n    var createCards = function() {\r\n        for (var i = 0; i < imageMap.length; i++) {\r\n            for (var j = 0; j < CONST.CARD_COPIES; j++) {\r\n                var card = new memoryCardGame.Card({\r\n                    id: cards.length,\r\n                    image: CONST.IMAGE_BASE_URL + '\\\\' + imageMap[i],\r\n                    gameManager: config.gameManager\r\n                });\r\n                cards.push(card);\r\n            }\r\n        }\r\n    };\r\n\r\n    var shuffleCards = function () {\r\n        cards = cards.sort(function () {\r\n            return 0.5 - Math.random();\r\n        });\r\n    };\r\n\r\n    var drawCards = function () {\r\n        for (var i = 0; i < cards.length; i++) {\r\n            var cardNode = cards[i].getNode();\r\n            self.container.append(cardNode);\r\n        }\r\n    };\r\n\r\n    this.getPreviousFlippedCard = function()  {\r\n        return flippedCards[flippedCards.length - 2];\r\n    };\r\n\r\n    this.addFlippedCard = function (card) {\r\n        return flippedCards.push(card);\r\n    };\r\n\r\n    this.isNewHandStarted = function () {\r\n        return self.getFlippedCardsNumber() % CONST.CARD_COPIES === 1;\r\n    };\r\n\r\n    this.isHandFinished = function () {\r\n        return self.getFlippedCardsNumber() % CONST.CARD_COPIES === 0;\r\n    };\r\n\r\n    this.isAllCardsFlipped = function () {\r\n        return self.getFlippedCardsNumber() === self.getCardsNumber();\r\n    };\r\n\r\n    this.setDiscoveredCards = function () {\r\n        for (var i = 1; i <= CONST.CARD_COPIES; i++) {\r\n            flippedCards[flippedCards.length - i].setDiscovered();\r\n        }\r\n    };\r\n\r\n    this.getFlippedCardsNumber = function () {\r\n        return flippedCards.length;\r\n    };\r\n\r\n    this.getCardsNumber = function() {\r\n        return cards.length;\r\n    };\r\n\r\n    this.coverLatestHandFlippedCards = function () {\r\n        setTimeout(function () {\r\n            for (var i = 0; i < CONST.CARD_COPIES; i++) {\r\n                flippedCards[self.getFlippedCardsNumber() - 1].getCardNodeAndFlip();\r\n                flippedCards.pop();\r\n            }\r\n        }, CONST.TIME_FOR_FLIP);\r\n    };\r\n\r\n    init.call(this);\r\n\r\n};\r\n\r\n","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.Card = function(params){\r\n\r\n\t'use strict';\r\n\r\n\tvar CONST = {\r\n\t\tCSS: {\r\n\t\t\tSINGLE_CARD_CLASS: 'memory-card'\r\n\t\t},\r\n\t\tDATA: {\r\n\t\t\tCARD_ID: 'data-card-id'\r\n\t\t},\r\n\t\tHTML: {\r\n\t\t\tCARD_NODE: '<li></li>',\r\n\t\t\tIMAGE_NODE: '<img>'\r\n\t\t}\r\n\t};\r\n\r\n\tvar config = {\r\n\t\tid: null,\r\n\t\tflipped: false,\r\n\t\timage: null,\r\n\t\tgameManager: null\r\n\t};\r\n\r\n\t// Merge incoming params with internal config\r\n\t$.extend(config, params);\r\n\r\n\tvar discovered = false;\r\n\r\n\tvar imageNode = $(CONST.HTML.IMAGE_NODE);\r\n\r\n\tvar self = this;\r\n\r\n\t var flip = function(cardNode) {\r\n\t\tconfig.flipped = !config.flipped;\r\n\r\n\t\tif(config.flipped === true){\r\n\t\t\tcardNode.append(getImageNode());\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcardNode.find(imageNode).remove();\r\n\t\t}\r\n\t};\r\n\r\n\tthis.getCardNodeAndFlip = function() {\r\n\t\tvar cardNode = $('.' + CONST.CSS.SINGLE_CARD_CLASS + '[' + CONST.DATA.CARD_ID + '=' + config.id + ']');\r\n\t\tflip(cardNode);\r\n\t};\r\n\r\n\tthis.getImage = function() {\r\n\t\treturn config.image;\r\n\t};\r\n\r\n\tvar getImageNode = function() {\r\n\t\timageNode.attr('src', config.image);\r\n\t\treturn imageNode;\r\n\t};\r\n\r\n\tthis.getNode = function() {\r\n\t\tvar cardNode = $(CONST.HTML.CARD_NODE);\r\n\t\tcardNode.addClass(CONST.CSS.SINGLE_CARD_CLASS).attr(CONST.DATA.CARD_ID, config.id);\r\n\t\tcardNode.click(function(){\r\n\t\t\tif(config.flipped === false) {\r\n\t\t\t\tflip(cardNode);\r\n\t\t\t\tif(discovered === false) {\r\n\t\t\t\t\tconfig.gameManager.onCardSelected(self);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn cardNode;\r\n\t};\r\n\r\n\tthis.setDiscovered = function() {\r\n\t\tdiscovered = true;\r\n\t};\r\n};\r\n\r\n","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.Stats = function(params){\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'current-stats-container',\r\n            BEST_SCORE: 'best-score',\r\n            BEST_SCORE_TEXT: 'best-score-text',\r\n            BEST_SCORE_NUMBER: 'best-score-number',\r\n            ATTEMPTS: 'attempts',\r\n            ATTEMPTS_TEXT: 'attempts-text',\r\n            ATTEMPTS_NUMBER: 'attempts-number'\r\n        },\r\n        SELECTOR: {\r\n            ATTEMPTS_NUMBER: '.attempts-number'\r\n        },\r\n        TEXT: {\r\n            ATTEMPTS: 'Attempts: ',\r\n            BEST_SCORE: 'Best score: '\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        bestScoreCounter: null,\r\n        attempts: 0\r\n\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    this.container = $('<div></div>').addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        draw();\r\n    };\r\n\r\n    var draw = function () {\r\n\r\n        var currentMoves = $('<div></div>').addClass(CONST.CSS.ATTEMPTS);\r\n        var attemptsText = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_TEXT).text(CONST.TEXT.ATTEMPTS);\r\n        var attemptsNumber = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_NUMBER).text(config.attempts);\r\n\r\n        currentMoves.append(attemptsText);\r\n        currentMoves.append(attemptsNumber);\r\n\r\n        self.container.append(currentMoves);\r\n\r\n        if (config.bestScoreCounter !== null) {\r\n            var bestScore = $('<div></div>').addClass(CONST.CSS.BEST_SCORE);\r\n            var bestScoreText = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_TEXT).text(CONST.TEXT.BEST_SCORE);\r\n            var bestScoreNumber = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_NUMBER).text(config.bestScoreCounter);\r\n\r\n            bestScore.append(bestScoreText);\r\n            bestScore.append(bestScoreNumber);\r\n            self.container.append(bestScore);\r\n        }\r\n    };\r\n\r\n    this.updateAttemptsCounter = function() {\r\n        config.attempts++;\r\n        $(CONST.SELECTOR.ATTEMPTS_NUMBER).text(config.attempts);\r\n    };\r\n\r\n    this.saveStats = function() {\r\n        if ((config.bestScoreCounter === null || config.attempts < config.bestScoreCounter)) {\r\n            memoryCardGame.utils.addDataInLocalStorage({bestScoreCounter: config.attempts});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n};\r\n\r\n","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.GameManager = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-card-game',\r\n            BOARD_CLASS: 'memory-board'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        cardsClass: CONST.CSS.CARDS_CLASS,\r\n        gameClass: CONST.CSS.ROOT,\r\n        singleCardClass: CONST.CSS.SINGLE_CARD_CLASS\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var deck;\r\n\r\n    var stats;\r\n\r\n    var timer = 0;\r\n\r\n    var persistentData = {\r\n        bestScoreCounter: null\r\n    };\r\n\r\n    this.container = $('<div></div>').addClass(config.gameClass);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        var memoryLocalStorage = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        if (memoryLocalStorage !== null) {\r\n            persistentData = memoryLocalStorage;\r\n        }\r\n        stats = new memoryCardGame.Stats({\r\n            bestScoreCounter: persistentData.bestScoreCounter\r\n        });\r\n        self.container.append(stats.container);\r\n\r\n        deck = new memoryCardGame.Deck({\r\n            gameManager: self,\r\n            cardsClass: config.cardsClass,\r\n            singleCardClass: config.singleCardClass\r\n        });\r\n\r\n        self.container.append(deck.container);\r\n\r\n        $('body').append(self.container);\r\n        startTimer();\r\n    };\r\n\r\n    //TODO: Cleanup timer\r\n    var endGame = function () {\r\n        stats.saveStats();\r\n    };\r\n\r\n    //TODO: Change interval milliseconds to constant\r\n    var startTimer = function () {\r\n        setInterval(function () {\r\n            timer++;\r\n        }, 1000);\r\n    };\r\n\r\n    var isGameEnded = function () {\r\n        return deck.isAllCardsFlipped();\r\n    };\r\n\r\n    this.onCardSelected = function (card) {\r\n        deck.addFlippedCard(card);\r\n        if (deck.isNewHandStarted()) {\r\n            return;\r\n        }\r\n        if (deck.getPreviousFlippedCard().getImage() === card.getImage()) {\r\n            if (deck.isHandFinished()) {\r\n                deck.setDiscoveredCards();\r\n                stats.updateAttemptsCounter();\r\n                if (isGameEnded() === true) {\r\n                    endGame();\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            deck.coverLatestHandFlippedCards();\r\n            stats.updateAttemptsCounter();\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n};","/* global $, memoryCardGame */\r\n\r\nmemoryCardGame.UserOptions = function(params){\r\n\r\n\t'use strict';\r\n\r\n\tvar CONST = {\r\n\t\tCSS: {\r\n\t\t\tUSER_OPTIONS_WRAPPER: 'user-options-wrapper',\r\n\t\t\tOPTION_PANEL_CLASS: 'user-options-panel'\r\n\t\t},\r\n\t\tTEXT: {\r\n\t\t\tPICTURE_NUMBER: 'Number of pictures:',\r\n\t\t\tUSER_OPTION_PANEL: 'User option panel',\r\n\t\t\tCLOSE: 'Close'\r\n\t\t}\r\n\t};\r\n\r\n\tvar config = {\r\n\t\tcardCopies: null\r\n\t};\r\n\r\n\t// Merge incoming params with internal config\r\n\t$.extend(config, params);\r\n\r\n\tvar self = this;\r\n\r\n\tself.container = $('<div></div>').addClass(CONST.CSS.USER_OPTIONS_WRAPPER);\r\n\r\n\tvar init = function () {\r\n\t\tdraw();\r\n\t};\r\n\r\n\tvar draw = function() {\r\n\t\t//TODO: Create utils library for dom elements\r\n\t\tvar userOptionsPanel = $('<div></div>').addClass(CONST.CSS.OPTION_PANEL_CLASS);\r\n\t\tdrawHeader(userOptionsPanel);\r\n\t\tdrawOptionsForm(userOptionsPanel);\r\n\t\tdrawFooter(userOptionsPanel);\r\n\t\tself.container.append(userOptionsPanel);\r\n\t\t//TODO: Create a global class for memoryGame and append panel to it\r\n\t\t$('body').append(self.container);\r\n\t};\r\n\r\n\tvar drawHeader = function(rootNode) {\r\n\t\tvar userOptionsTitle = $('<h2></h2>').text(CONST.TEXT.USER_OPTION_PANEL);\r\n\t\trootNode.append(userOptionsTitle);\r\n\t};\r\n\r\n\tvar drawOptionsForm = function(rootNode) {\r\n\t\tvar howManyPicturesLabel = $('<label></label>').text(CONST.TEXT.PICTURE_NUMBER);\r\n\t\tvar howManyPictures = $('<input type=\"text\">');\r\n\t\thowManyPicturesLabel.append(howManyPictures);\r\n\t\trootNode.append(howManyPicturesLabel);\r\n\t};\r\n\r\n\tvar drawFooter = function(rootNode) {\r\n\t\tvar closeButton = $('<button></button>').text(CONST.TEXT.CLOSE);\r\n\t\tcloseButton.click(function(){\r\n\t\t\tself.container.hide();\r\n\t\t\tnew memoryCardGame.GameManager();\r\n\t\t});\r\n\t\trootNode.append(closeButton);\r\n\t};\r\n\r\n\tinit.call(this);\r\n\r\n};\r\n\r\n"],"sourceRoot":"."}