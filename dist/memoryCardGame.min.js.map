{"version":3,"sources":["core.js","utils.js","Deck.js","Card.js","Stats.js","GameManager.js","UserOptions.js"],"names":["window","memoryCardGame","utils","persistInLocalStorage","data","localStorage","setItem","JSON","stringify","addDataInLocalStorage","persistedData","retrieveFromLocalStorage","mergedData","$","extend","parse","getItem","getFromLocalStorage","key","Deck","params","luga","Notifier","this","CONST","CSS","ROOT","SINGLE_CARD_CLASS","CARD_COPIES","TIME_FOR_FLIP","IMAGE_BASE_URL","EVENT","HAND_FINISHED","HAND_INVALID","CARDS_ALL_FLIPPED","HTML","DECK","config","selectedTheme","cards","flippedCards","container","addClass","self","init","createCards","shuffleCards","drawCards","ajaxSetup","async","getJSON","json","selectedThemeCards","each","val","j","card","Card","id","length","image","addObserver","push","sort","Math","random","i","append","getPreviousFlippedCard","isNewHandStarted","isHandFinished","isAllCardsFlipped","setDiscoveredCards","setDiscovered","coverLatestHandFlippedCards","setTimeout","getCardNodeAndFlip","pop","onSelectedCardHandler","getImage","notifyObservers","call","DATA","CARD_ID","CARD_NODE","IMAGE_NODE","SELECTED_CARD","flipped","discovered","imageNode","attr","attachEvents","click","flip","cardNode","getImageNode","find","remove","Stats","BEST_SCORE","BEST_SCORE_TEXT","BEST_SCORE_NUMBER","ATTEMPTS","ATTEMPTS_TEXT","ATTEMPTS_NUMBER","SELECTOR","TEXT","attempts","attemptsNumber","bestScoreNumber","draw","currentMoves","attemptsText","text","bestScoreCounter","bestScore","bestScoreText","updateAttemptsCounter","saveStats","undefined","GameManager","BOARD_CLASS","TIMER_CLASS","TIMER_SELECTOR","TIMER","rootNode","cardTheme","deck","stats","timerInterval","timer","UserOptions","gameManagerInstance","startGame","cardsClass","singleCardClass","startTimer","endGame","clearInterval","timerContainer","setInterval","onHandFinishedHandler","onHandInvalidHandler","onCardsAllFlippedHandler","USER_OPTIONS_WRAPPER","OPTION_PANEL_CLASS","CARD_THEME","PICTURE_NUMBER","USER_OPTION_PANEL","CLOSE","cardCopies","userOptionsPanel","drawHeader","drawOptionsForm","drawFooter","userOptionsTitle","drawCardThemeForm","cardTemeText","dogsOption","catsOption","closeButton","hide"],"mappings":"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","file":"memoryCardGame.min.js","sourcesContent":["window.memoryCardGame = {};","/* global $, memoryCardGame */\r\n\r\nwindow.memoryCardGame.utils = {};\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    memoryCardGame.utils.persistInLocalStorage = function (data) {\r\n        localStorage.setItem('memoryCardGame', JSON.stringify(data));\r\n    };\r\n\r\n    memoryCardGame.utils.addDataInLocalStorage = function (data) {\r\n        var persistedData = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        var mergedData = $.extend({}, persistedData, data);\r\n        memoryCardGame.utils.persistInLocalStorage(mergedData);\r\n    };\r\n\r\n    memoryCardGame.utils.retrieveFromLocalStorage = function () {\r\n        return JSON.parse(localStorage.getItem('memoryCardGame'));\r\n    };\r\n\r\n    memoryCardGame.utils.getFromLocalStorage = function (key) {\r\n        var persistedData = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        if(persistedData !== null) {\r\n            return persistedData[key];\r\n        }\r\n    };\r\n})();\r\n","memoryCardGame.Deck = function (params) {\r\n\r\n    'use strict';\r\n\r\n    luga.extend(luga.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-cards',\r\n            SINGLE_CARD_CLASS: 'memory-card'\r\n        },\r\n        CARD_COPIES: 2,\r\n        TIME_FOR_FLIP: 500,\r\n        IMAGE_BASE_URL: 'src\\\\cardthemes',\r\n        EVENT: {\r\n            HAND_FINISHED: 'handFinished',\r\n            HAND_INVALID: 'handInvalid',\r\n            CARDS_ALL_FLIPPED: 'cardsAllFlipped'\r\n        },\r\n        HTML: {\r\n            DECK: '<ul></ul>'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        selectedTheme: null\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var cards = [];\r\n\r\n    var flippedCards = [];\r\n\r\n    this.container = $(CONST.HTML.DECK).addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        createCards();\r\n        shuffleCards();\r\n        drawCards();\r\n    };\r\n\r\n    var createCards = function () {\r\n\r\n        $.ajaxSetup({\r\n            async: false\r\n        });\r\n\r\n        $.getJSON('dist/themes.json', function(json) {\r\n\r\n            var selectedThemeCards = json[config.selectedTheme];\r\n            $.each(selectedThemeCards, function( key, val ) {\r\n                for (var j = 0; j < CONST.CARD_COPIES; j++) {\r\n\r\n                    var card = new memoryCardGame.Card({\r\n                        id: cards.length,\r\n                        image: CONST.IMAGE_BASE_URL + '\\\\' + val\r\n                    });\r\n                    card.addObserver(self);\r\n                    cards.push(card);\r\n                }\r\n            });\r\n        });\r\n\r\n        $.ajaxSetup({\r\n            async: true\r\n        });\r\n\r\n    };\r\n\r\n    var shuffleCards = function () {\r\n        cards = cards.sort(function () {\r\n            return 0.5 - Math.random();\r\n        });\r\n    };\r\n\r\n    var drawCards = function () {\r\n        for (var i = 0; i < cards.length; i++) {\r\n            self.container.append(cards[i].container);\r\n        }\r\n    };\r\n\r\n    var getPreviousFlippedCard = function () {\r\n        return flippedCards[flippedCards.length - 2];\r\n    };\r\n\r\n    var isNewHandStarted = function () {\r\n        return flippedCards.length % CONST.CARD_COPIES === 1;\r\n    };\r\n\r\n    var isHandFinished = function () {\r\n        return flippedCards.length % CONST.CARD_COPIES === 0;\r\n    };\r\n\r\n    var isAllCardsFlipped = function () {\r\n        return flippedCards.length === cards.length;\r\n    };\r\n\r\n    var setDiscoveredCards = function () {\r\n        for (var i = 1; i <= CONST.CARD_COPIES; i++) {\r\n            flippedCards[flippedCards.length - i].setDiscovered();\r\n        }\r\n    };\r\n\r\n    var coverLatestHandFlippedCards = function () {\r\n        setTimeout(function () {\r\n            for (var i = 0; i < CONST.CARD_COPIES; i++) {\r\n                flippedCards[flippedCards.length - 1].getCardNodeAndFlip();\r\n                flippedCards.pop();\r\n            }\r\n        }, CONST.TIME_FOR_FLIP);\r\n    };\r\n\r\n    this.onSelectedCardHandler = function (data) {\r\n        var card = data.card;\r\n        flippedCards.push(card);\r\n        if (isNewHandStarted()) {\r\n            return;\r\n        }\r\n        if (getPreviousFlippedCard().getImage() === card.getImage()) {\r\n            if (isHandFinished()) {\r\n                setDiscoveredCards();\r\n                self.notifyObservers(CONST.EVENT.HAND_FINISHED, {});\r\n                if (isAllCardsFlipped()) {\r\n                    self.notifyObservers(CONST.EVENT.CARDS_ALL_FLIPPED, {});\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            coverLatestHandFlippedCards();\r\n            self.notifyObservers(CONST.EVENT.HAND_INVALID, {});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n\r\n};\r\n\r\n","memoryCardGame.Card = function (params) {\r\n    'use strict';\r\n\r\n    luga.extend(luga.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-card'\r\n        },\r\n        DATA: {\r\n            CARD_ID: 'data-card-id'\r\n        },\r\n        HTML: {\r\n            CARD_NODE: '<li></li>',\r\n            IMAGE_NODE: '<img>'\r\n        },\r\n        EVENT: {\r\n            SELECTED_CARD: 'selectedCard'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        id: null,\r\n        flipped: false,\r\n        image: null\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var discovered = false;\r\n\r\n    var imageNode = $(CONST.HTML.IMAGE_NODE);\r\n\r\n    this.container = $(CONST.HTML.CARD_NODE).addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        self.container.attr(CONST.DATA.CARD_ID, config.id);\r\n        attachEvents();\r\n    };\r\n\r\n    var attachEvents = function () {\r\n        self.container.click(function () {\r\n            if (config.flipped === false) {\r\n                flip(self.container);\r\n                if (discovered === false) {\r\n                    self.notifyObservers(CONST.EVENT.SELECTED_CARD, {\r\n                        card: self\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    var flip = function (cardNode) {\r\n        config.flipped = !config.flipped;\r\n\r\n        if (config.flipped === true) {\r\n            cardNode.append(getImageNode());\r\n        }\r\n        else {\r\n            cardNode.find(imageNode).remove();\r\n        }\r\n    };\r\n\r\n    var getImageNode = function () {\r\n        imageNode.attr('src', config.image);\r\n        return imageNode;\r\n    };\r\n\r\n    this.getCardNodeAndFlip = function () {\r\n        var cardNode = $('.' + CONST.CSS.ROOT + '[' + CONST.DATA.CARD_ID + '=' + config.id + ']');\r\n        flip(cardNode);\r\n    };\r\n\r\n    this.getImage = function () {\r\n        return config.image;\r\n    };\r\n\r\n    this.setDiscovered = function () {\r\n        discovered = true;\r\n    };\r\n\r\n    init.call(this);\r\n};\r\n\r\n","memoryCardGame.Stats = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'current-stats-container',\r\n            BEST_SCORE: 'best-score',\r\n            BEST_SCORE_TEXT: 'best-score-text',\r\n            BEST_SCORE_NUMBER: 'best-score-number',\r\n            ATTEMPTS: 'attempts',\r\n            ATTEMPTS_TEXT: 'attempts-text',\r\n            ATTEMPTS_NUMBER: 'attempts-number'\r\n        },\r\n        SELECTOR: {\r\n            ATTEMPTS_NUMBER: '.attempts-number'\r\n        },\r\n        TEXT: {\r\n            ATTEMPTS: 'Attempts: ',\r\n            BEST_SCORE: 'Best score: '\r\n        }\r\n    };\r\n\r\n    var config = {};\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var attempts = 0;\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    var attemptsNumber = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_NUMBER);\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    var bestScoreNumber = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_NUMBER);\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    this.container = $('<div></div>').addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        draw();\r\n    };\r\n\r\n    var draw = function () {\r\n\r\n        var currentMoves = $('<div></div>').addClass(CONST.CSS.ATTEMPTS);\r\n        var attemptsText = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_TEXT).text(CONST.TEXT.ATTEMPTS);\r\n        attemptsNumber.text(attempts);\r\n\r\n        currentMoves.append(attemptsText);\r\n        currentMoves.append(attemptsNumber);\r\n\r\n        self.container.append(currentMoves);\r\n\r\n        var bestScoreCounter = memoryCardGame.utils.getFromLocalStorage('bestScoreCounter');\r\n\r\n        if (bestScoreCounter) {\r\n            var bestScore = $('<div></div>').addClass(CONST.CSS.BEST_SCORE);\r\n            var bestScoreText = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_TEXT).text(CONST.TEXT.BEST_SCORE);\r\n            bestScoreNumber.text(bestScoreCounter);\r\n\r\n            bestScore.append(bestScoreText);\r\n            bestScore.append(bestScoreNumber);\r\n            self.container.append(bestScore);\r\n        }\r\n    };\r\n\r\n    this.updateAttemptsCounter = function () {\r\n        attempts++;\r\n        attemptsNumber.text(attempts);\r\n    };\r\n\r\n    this.saveStats = function () {\r\n        var bestScoreCounter = memoryCardGame.utils.getFromLocalStorage('bestScoreCounter');\r\n        if ((bestScoreCounter === undefined || attempts < bestScoreCounter)) {\r\n            memoryCardGame.utils.addDataInLocalStorage({bestScoreCounter: attempts});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n};\r\n\r\n","memoryCardGame.GameManager = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-card-game',\r\n            BOARD_CLASS: 'memory-board',\r\n            TIMER_CLASS: 'timer'\r\n        },\r\n        SELECTOR: {\r\n            TIMER_SELECTOR: '.timer'\r\n        },\r\n        TIMER: 1000\r\n    };\r\n\r\n    var config = {\r\n        rootNode: $('body'),\r\n        cardTheme: 'dogs'\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var deck;\r\n\r\n    var stats;\r\n\r\n    var timer = 0;\r\n\r\n    var timerInterval;\r\n\r\n    this.container = $('<div></div>').addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        new memoryCardGame.UserOptions({\r\n            gameManagerInstance: self\r\n        });\r\n    };\r\n\r\n    this.startGame = function (selectedTheme) {\r\n        stats = new memoryCardGame.Stats();\r\n        self.container.append(stats.container);\r\n\r\n        deck = new memoryCardGame.Deck({\r\n            cardsClass: config.cardsClass,\r\n            singleCardClass: config.singleCardClass,\r\n            selectedTheme: selectedTheme\r\n        });\r\n        deck.addObserver(self);\r\n        self.container.append(deck.container);\r\n\r\n        startTimer();\r\n\r\n        config.rootNode.append(self.container);\r\n    };\r\n\r\n    var endGame = function () {\r\n        stats.saveStats();\r\n        clearInterval(timerInterval);\r\n    };\r\n\r\n    var startTimer = function () {\r\n        var timerContainer = $('<div></div>').addClass(CONST.CSS.TIMER_CLASS);\r\n        self.container.append(timerContainer.text(timer));\r\n        timerInterval = setInterval(function () {\r\n            timerContainer.text(++timer);\r\n        }, CONST.TIMER);\r\n    };\r\n\r\n    this.onHandFinishedHandler = function () {\r\n        stats.updateAttemptsCounter();\r\n    };\r\n\r\n    this.onHandInvalidHandler = function () {\r\n        stats.updateAttemptsCounter();\r\n    };\r\n\r\n    this.onCardsAllFlippedHandler = function () {\r\n        endGame();\r\n    };\r\n\r\n    init.call(this);\r\n};","memoryCardGame.UserOptions = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            USER_OPTIONS_WRAPPER: 'user-options-wrapper',\r\n            OPTION_PANEL_CLASS: 'user-options-panel'\r\n        },\r\n        TEXT: {\r\n            CARD_THEME: 'Card theme:',\r\n            PICTURE_NUMBER: 'Number of pictures:',\r\n            USER_OPTION_PANEL: 'User option panel',\r\n            CLOSE: 'Close'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        cardCopies: null,\r\n        gameManagerInstance: null\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var self = this;\r\n\r\n    self.container = $('<div></div>').addClass(CONST.CSS.USER_OPTIONS_WRAPPER);\r\n\r\n    var init = function () {\r\n        draw();\r\n    };\r\n\r\n    var draw = function () {\r\n        //TODO: Create utils library for dom elements\r\n        var userOptionsPanel = $('<div></div>').addClass(CONST.CSS.OPTION_PANEL_CLASS);\r\n        drawHeader(userOptionsPanel);\r\n        drawOptionsForm(userOptionsPanel);\r\n        drawFooter(userOptionsPanel);\r\n        self.container.append(userOptionsPanel);\r\n        //TODO: Create a global class for memoryGame and append panel to it\r\n        $('body').append(self.container);\r\n    };\r\n\r\n    var drawHeader = function (rootNode) {\r\n        var userOptionsTitle = $('<h2></h2>').text(CONST.TEXT.USER_OPTION_PANEL);\r\n        rootNode.append(userOptionsTitle);\r\n    };\r\n\r\n    var drawOptionsForm = function (rootNode) {\r\n        drawCardThemeForm(rootNode);\r\n    };\r\n\r\n    var drawHowManyPicturesForm = function (rootNode) {\r\n        var howManyPicturesLabel = $('<label></label>').text(CONST.TEXT.PICTURE_NUMBER);\r\n        var howManyPictures = $('<input type=\"text\">');\r\n        howManyPicturesLabel.append(howManyPictures);\r\n        rootNode.append(howManyPicturesLabel);\r\n    };\r\n\r\n    var drawCardThemeForm = function (rootNode) {\r\n        var cardTemeText = $('<span></span>').text(CONST.TEXT.CARD_THEME);\r\n        rootNode.append(cardTemeText);\r\n        var dogsOption = $('<label><input name=\"theme\" value=\"dogs\" type=\"radio\">Dogs</label>');\r\n        var catsOption = $('<label><input name=\"theme\" value=\"cats\" type=\"radio\">Cats</label><br>');\r\n        rootNode.append(dogsOption);\r\n        rootNode.append(catsOption);\r\n    };\r\n\r\n    var drawFooter = function (rootNode) {\r\n        var closeButton = $('<button></button>').text(CONST.TEXT.CLOSE);\r\n        closeButton.click(function () {\r\n            self.container.hide();\r\n            var selectedTheme = $('input:radio[name=\\'theme\\']:checked').val();\r\n            config.gameManagerInstance.startGame(selectedTheme);\r\n        });\r\n        rootNode.append(closeButton);\r\n    };\r\n\r\n    init.call(this);\r\n\r\n};\r\n\r\n"],"sourceRoot":"."}