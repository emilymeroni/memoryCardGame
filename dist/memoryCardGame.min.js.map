{"version":3,"sources":["core.js","utils.js","Deck.js","Card.js","Stats.js","GameManager.js","UserOptions.js"],"names":["window","memoryCardGame","utils","persistInLocalStorage","data","localStorage","setItem","JSON","stringify","addDataInLocalStorage","persistedData","retrieveFromLocalStorage","mergedData","$","extend","parse","getItem","Deck","params","luga","Notifier","this","CONST","CSS","ROOT","SINGLE_CARD_CLASS","CARD_COPIES","TIME_FOR_FLIP","DEFAULT_IMAGES","IMAGE_BASE_URL","EVENT","HAND_FINISHED","HAND_INVALID","CARDS_ALL_FLIPPED","HTML","DECK","config","cardsClass","CARDS_CLASS","singleCardClass","cards","flippedCards","imageMap","container","addClass","self","init","concat","createCards","shuffleCards","drawCards","i","length","j","card","Card","id","image","addObserver","push","sort","Math","random","append","getPreviousFlippedCard","isNewHandStarted","isHandFinished","isAllCardsFlipped","setDiscoveredCards","setDiscovered","coverLatestHandFlippedCards","setTimeout","getCardNodeAndFlip","pop","onSelectedCardHandler","getImage","notifyObservers","call","DATA","CARD_ID","CARD_NODE","IMAGE_NODE","SELECTED_CARD","flipped","discovered","imageNode","attr","attachEvents","click","flip","cardNode","getImageNode","find","remove","Stats","BEST_SCORE","BEST_SCORE_TEXT","BEST_SCORE_NUMBER","ATTEMPTS","ATTEMPTS_TEXT","ATTEMPTS_NUMBER","SELECTOR","TEXT","bestScoreCounter","attempts","draw","currentMoves","attemptsText","text","attemptsNumber","bestScore","bestScoreText","bestScoreNumber","updateAttemptsCounter","saveStats","GameManager","BOARD_CLASS","TIMER_CLASS","TIMER_SELECTOR","GAME","TIMER","gameClass","deck","stats","timerInterval","timer","persistentData","memoryLocalStorage","startTimer","endGame","clearInterval","setInterval","onHandFinishedHandler","onHandInvalidHandler","onCardsAllFlippedHandler","UserOptions","USER_OPTIONS_WRAPPER","OPTION_PANEL_CLASS","PICTURE_NUMBER","USER_OPTION_PANEL","CLOSE","cardCopies","userOptionsPanel","drawHeader","drawOptionsForm","drawFooter","rootNode","userOptionsTitle","howManyPicturesLabel","howManyPictures","closeButton","hide"],"mappings":"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","file":"memoryCardGame.min.js","sourcesContent":["window.memoryCardGame = {};","/* global $, memoryCardGame */\r\n\r\nwindow.memoryCardGame.utils = {};\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    memoryCardGame.utils.persistInLocalStorage = function (data) {\r\n        localStorage.setItem('memoryCardGame', JSON.stringify(data));\r\n    };\r\n\r\n    memoryCardGame.utils.addDataInLocalStorage = function (data) {\r\n        var persistedData = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        var mergedData = $.extend({}, persistedData, data);\r\n        memoryCardGame.utils.persistInLocalStorage(mergedData);\r\n    };\r\n\r\n    memoryCardGame.utils.retrieveFromLocalStorage = function () {\r\n        return JSON.parse(localStorage.getItem('memoryCardGame'));\r\n    };\r\n})();\r\n","memoryCardGame.Deck = function (params) {\r\n\r\n    'use strict';\r\n\r\n    luga.extend(luga.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-cards',\r\n            SINGLE_CARD_CLASS: 'memory-card'\r\n        },\r\n        CARD_COPIES: 2,\r\n        TIME_FOR_FLIP: 500,\r\n        DEFAULT_IMAGES: [\r\n            'Hydrangeas.jpg',\r\n            'Jellyfish.jpg',\r\n            'Koala.jpg',\r\n            'Penguins.jpg',\r\n            'Tulips.jpg'\r\n        ],\r\n        IMAGE_BASE_URL: 'src\\\\images',\r\n        EVENT: {\r\n            HAND_FINISHED: 'handFinished',\r\n            HAND_INVALID: 'handInvalid',\r\n            CARDS_ALL_FLIPPED: 'cardsAllFlipped'\r\n        },\r\n        HTML: {\r\n            DECK: '<ul></ul>'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        cardsClass: CONST.CSS.CARDS_CLASS,\r\n        singleCardClass: CONST.CSS.SINGLE_CARD_CLASS\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var cards = [];\r\n\r\n    var flippedCards = [];\r\n\r\n    var imageMap = [];\r\n\r\n    this.container = $(CONST.HTML.DECK).addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        imageMap = imageMap.concat(CONST.DEFAULT_IMAGES);\r\n        createCards();\r\n        shuffleCards();\r\n        drawCards();\r\n    };\r\n\r\n    var createCards = function () {\r\n        for (var i = 0; i < imageMap.length; i++) {\r\n            for (var j = 0; j < CONST.CARD_COPIES; j++) {\r\n                var card = new memoryCardGame.Card({\r\n                    id: cards.length,\r\n                    image: CONST.IMAGE_BASE_URL + '\\\\' + imageMap[i]\r\n                });\r\n                card.addObserver(self);\r\n                cards.push(card);\r\n            }\r\n        }\r\n    };\r\n\r\n    var shuffleCards = function () {\r\n        cards = cards.sort(function () {\r\n            return 0.5 - Math.random();\r\n        });\r\n    };\r\n\r\n    var drawCards = function () {\r\n        for (var i = 0; i < cards.length; i++) {\r\n            self.container.append(cards[i].container);\r\n        }\r\n    };\r\n\r\n    var getPreviousFlippedCard = function () {\r\n        return flippedCards[flippedCards.length - 2];\r\n    };\r\n\r\n    var isNewHandStarted = function () {\r\n        return flippedCards.length % CONST.CARD_COPIES === 1;\r\n    };\r\n\r\n    var isHandFinished = function () {\r\n        return flippedCards.length % CONST.CARD_COPIES === 0;\r\n    };\r\n\r\n    var isAllCardsFlipped = function () {\r\n        return flippedCards.length === cards.length;\r\n    };\r\n\r\n    var setDiscoveredCards = function () {\r\n        for (var i = 1; i <= CONST.CARD_COPIES; i++) {\r\n            flippedCards[flippedCards.length - i].setDiscovered();\r\n        }\r\n    };\r\n\r\n    var coverLatestHandFlippedCards = function () {\r\n        setTimeout(function () {\r\n            for (var i = 0; i < CONST.CARD_COPIES; i++) {\r\n                flippedCards[flippedCards.length - 1].getCardNodeAndFlip();\r\n                flippedCards.pop();\r\n            }\r\n        }, CONST.TIME_FOR_FLIP);\r\n    };\r\n\r\n    this.onSelectedCardHandler = function (data) {\r\n        var card = data.card;\r\n        flippedCards.push(card);\r\n        if (isNewHandStarted()) {\r\n            return;\r\n        }\r\n        if (getPreviousFlippedCard().getImage() === card.getImage()) {\r\n            if (isHandFinished()) {\r\n                setDiscoveredCards();\r\n                self.notifyObservers(CONST.EVENT.HAND_FINISHED, {});\r\n                if (isAllCardsFlipped()) {\r\n                    self.notifyObservers(CONST.EVENT.CARDS_ALL_FLIPPED, {});\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            coverLatestHandFlippedCards();\r\n            self.notifyObservers(CONST.EVENT.HAND_INVALID, {});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n\r\n};\r\n\r\n","memoryCardGame.Card = function (params) {\r\n    'use strict';\r\n\r\n    luga.extend(luga.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-card'\r\n        },\r\n        DATA: {\r\n            CARD_ID: 'data-card-id'\r\n        },\r\n        HTML: {\r\n            CARD_NODE: '<li></li>',\r\n            IMAGE_NODE: '<img>'\r\n        },\r\n        EVENT: {\r\n            SELECTED_CARD: 'selectedCard'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        id: null,\r\n        flipped: false,\r\n        image: null\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var discovered = false;\r\n\r\n    var imageNode = $(CONST.HTML.IMAGE_NODE);\r\n\r\n    this.container = $(CONST.HTML.CARD_NODE).addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        self.container.attr(CONST.DATA.CARD_ID, config.id);\r\n        attachEvents();\r\n    };\r\n\r\n    var attachEvents = function () {\r\n        self.container.click(function () {\r\n            if (config.flipped === false) {\r\n                flip(self.container);\r\n                if (discovered === false) {\r\n                    self.notifyObservers(CONST.EVENT.SELECTED_CARD, {\r\n                        card: self\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    var flip = function (cardNode) {\r\n        config.flipped = !config.flipped;\r\n\r\n        if (config.flipped === true) {\r\n            cardNode.append(getImageNode());\r\n        }\r\n        else {\r\n            cardNode.find(imageNode).remove();\r\n        }\r\n    };\r\n\r\n    var getImageNode = function () {\r\n        imageNode.attr('src', config.image);\r\n        return imageNode;\r\n    };\r\n\r\n    this.getCardNodeAndFlip = function () {\r\n        var cardNode = $('.' + CONST.CSS.ROOT + '[' + CONST.DATA.CARD_ID + '=' + config.id + ']');\r\n        flip(cardNode);\r\n    };\r\n\r\n    this.getImage = function () {\r\n        return config.image;\r\n    };\r\n\r\n    this.setDiscovered = function () {\r\n        discovered = true;\r\n    };\r\n\r\n    init.call(this);\r\n};\r\n\r\n","memoryCardGame.Stats = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'current-stats-container',\r\n            BEST_SCORE: 'best-score',\r\n            BEST_SCORE_TEXT: 'best-score-text',\r\n            BEST_SCORE_NUMBER: 'best-score-number',\r\n            ATTEMPTS: 'attempts',\r\n            ATTEMPTS_TEXT: 'attempts-text',\r\n            ATTEMPTS_NUMBER: 'attempts-number'\r\n        },\r\n        SELECTOR: {\r\n            ATTEMPTS_NUMBER: '.attempts-number'\r\n        },\r\n        TEXT: {\r\n            ATTEMPTS: 'Attempts: ',\r\n            BEST_SCORE: 'Best score: '\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        bestScoreCounter: null,\r\n        attempts: 0\r\n\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    this.container = $('<div></div>').addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        draw();\r\n    };\r\n\r\n    var draw = function () {\r\n\r\n        var currentMoves = $('<div></div>').addClass(CONST.CSS.ATTEMPTS);\r\n        var attemptsText = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_TEXT).text(CONST.TEXT.ATTEMPTS);\r\n        var attemptsNumber = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_NUMBER).text(config.attempts);\r\n\r\n        currentMoves.append(attemptsText);\r\n        currentMoves.append(attemptsNumber);\r\n\r\n        self.container.append(currentMoves);\r\n\r\n        if (config.bestScoreCounter !== null) {\r\n            var bestScore = $('<div></div>').addClass(CONST.CSS.BEST_SCORE);\r\n            var bestScoreText = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_TEXT).text(CONST.TEXT.BEST_SCORE);\r\n            var bestScoreNumber = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_NUMBER).text(config.bestScoreCounter);\r\n\r\n            bestScore.append(bestScoreText);\r\n            bestScore.append(bestScoreNumber);\r\n            self.container.append(bestScore);\r\n        }\r\n    };\r\n\r\n    this.updateAttemptsCounter = function () {\r\n        config.attempts++;\r\n        self.container.find(CONST.SELECTOR.ATTEMPTS_NUMBER).text(config.attempts);\r\n    };\r\n\r\n    this.saveStats = function () {\r\n        if ((config.bestScoreCounter === null || config.attempts < config.bestScoreCounter)) {\r\n            memoryCardGame.utils.addDataInLocalStorage({bestScoreCounter: config.attempts});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n};\r\n\r\n","memoryCardGame.GameManager = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-card-game',\r\n            BOARD_CLASS: 'memory-board',\r\n            TIMER_CLASS: 'timer'\r\n        },\r\n        SELECTOR: {\r\n            TIMER_SELECTOR: '.timer'\r\n        },\r\n        HTML: {\r\n            GAME: '<div></div>'\r\n        },\r\n        TIMER: 1000\r\n    };\r\n\r\n    var config = {\r\n        cardsClass: CONST.CSS.CARDS_CLASS,\r\n        gameClass: CONST.CSS.ROOT,\r\n        singleCardClass: CONST.CSS.SINGLE_CARD_CLASS\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var deck;\r\n\r\n    var stats;\r\n\r\n    var timer = 0;\r\n\r\n    var timerInterval;\r\n\r\n    var persistentData = {\r\n        bestScoreCounter: null\r\n    };\r\n\r\n    this.container = $(CONST.HTML.GAME).addClass(config.gameClass);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        var memoryLocalStorage = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        if (memoryLocalStorage !== null) {\r\n            persistentData = memoryLocalStorage;\r\n        }\r\n\r\n        stats = new memoryCardGame.Stats({\r\n            bestScoreCounter: persistentData.bestScoreCounter\r\n        });\r\n        self.container.append(stats.container);\r\n\r\n        deck = new memoryCardGame.Deck({\r\n            cardsClass: config.cardsClass,\r\n            singleCardClass: config.singleCardClass\r\n        });\r\n\r\n        deck.addObserver(self);\r\n        self.container.append(deck.container);\r\n\r\n        self.container.append($('<div></div>').addClass(CONST.CSS.TIMER_CLASS).text(timer));\r\n\r\n        $('body').append(self.container);\r\n        startTimer();\r\n    };\r\n\r\n    var endGame = function () {\r\n        stats.saveStats();\r\n        clearInterval(timerInterval);\r\n    };\r\n\r\n    var startTimer = function () {\r\n        timerInterval = setInterval(function () {\r\n            $(CONST.SELECTOR.TIMER_SELECTOR).text(++timer);\r\n        }, CONST.TIMER);\r\n    };\r\n\r\n    this.onHandFinishedHandler = function () {\r\n        stats.updateAttemptsCounter();\r\n    };\r\n\r\n    this.onHandInvalidHandler = function () {\r\n        stats.updateAttemptsCounter();\r\n    };\r\n\r\n    this.onCardsAllFlippedHandler = function () {\r\n        endGame();\r\n    };\r\n\r\n    init.call(this);\r\n};","memoryCardGame.UserOptions = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            USER_OPTIONS_WRAPPER: 'user-options-wrapper',\r\n            OPTION_PANEL_CLASS: 'user-options-panel'\r\n        },\r\n        TEXT: {\r\n            PICTURE_NUMBER: 'Number of pictures:',\r\n            USER_OPTION_PANEL: 'User option panel',\r\n            CLOSE: 'Close'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        cardCopies: null\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var self = this;\r\n\r\n    self.container = $('<div></div>').addClass(CONST.CSS.USER_OPTIONS_WRAPPER);\r\n\r\n    var init = function () {\r\n        draw();\r\n    };\r\n\r\n    var draw = function () {\r\n        //TODO: Create utils library for dom elements\r\n        var userOptionsPanel = $('<div></div>').addClass(CONST.CSS.OPTION_PANEL_CLASS);\r\n        drawHeader(userOptionsPanel);\r\n        drawOptionsForm(userOptionsPanel);\r\n        drawFooter(userOptionsPanel);\r\n        self.container.append(userOptionsPanel);\r\n        //TODO: Create a global class for memoryGame and append panel to it\r\n        $('body').append(self.container);\r\n    };\r\n\r\n    var drawHeader = function (rootNode) {\r\n        var userOptionsTitle = $('<h2></h2>').text(CONST.TEXT.USER_OPTION_PANEL);\r\n        rootNode.append(userOptionsTitle);\r\n    };\r\n\r\n    var drawOptionsForm = function (rootNode) {\r\n        var howManyPicturesLabel = $('<label></label>').text(CONST.TEXT.PICTURE_NUMBER);\r\n        var howManyPictures = $('<input type=\"text\">');\r\n        howManyPicturesLabel.append(howManyPictures);\r\n        rootNode.append(howManyPicturesLabel);\r\n    };\r\n\r\n    var drawFooter = function (rootNode) {\r\n        var closeButton = $('<button></button>').text(CONST.TEXT.CLOSE);\r\n        closeButton.click(function () {\r\n            self.container.hide();\r\n            new memoryCardGame.GameManager();\r\n        });\r\n        rootNode.append(closeButton);\r\n    };\r\n\r\n    init.call(this);\r\n\r\n};\r\n\r\n"],"sourceRoot":"."}