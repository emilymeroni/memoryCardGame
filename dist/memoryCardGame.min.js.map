{"version":3,"sources":["core.js","utils.js","Deck.js","Card.js","Stats.js","GameManager.js","UserOptions.js"],"names":["window","memoryCardGame","utils","persistInLocalStorage","data","localStorage","setItem","JSON","stringify","addDataInLocalStorage","persistedData","retrieveFromLocalStorage","mergedData","$","extend","parse","getItem","getFromLocalStorage","key","Deck","params","luga","Notifier","this","CONST","CSS","ROOT","SINGLE_CARD_CLASS","CARD_COPIES","TIME_FOR_FLIP","IMAGE_BASE_URL","EVENT","HAND_FINISHED","HAND_INVALID","CARDS_ALL_FLIPPED","HTML","DECK","config","selectedTheme","cards","flippedCards","container","addClass","self","init","createCards","shuffleCards","drawCards","ajaxSetup","async","getJSON","json","selectedThemeCards","i","length","j","card","Card","id","image","addObserver","push","sort","Math","random","append","getPreviousFlippedCard","isNewHandStarted","isHandFinished","isAllCardsFlipped","setDiscoveredCards","setDiscovered","coverLatestHandFlippedCards","setTimeout","getCardNodeAndFlip","pop","onSelectedCardHandler","getImage","notifyObservers","call","DATA","CARD_ID","CARD_NODE","IMAGE_NODE","SELECTED_CARD","flipped","discovered","imageNode","attr","attachEvents","click","flip","cardNode","getImageNode","find","remove","Stats","BEST_SCORE","BEST_SCORE_TEXT","BEST_SCORE_NUMBER","ATTEMPTS","ATTEMPTS_TEXT","ATTEMPTS_NUMBER","SELECTOR","TEXT","attempts","attemptsNumber","bestScoreNumber","draw","currentMoves","attemptsText","text","bestScoreCounter","bestScore","bestScoreText","updateAttemptsCounter","saveStats","undefined","GameManager","BOARD_CLASS","TIMER_CLASS","TIMER_SELECTOR","TIMER","rootNode","cardTheme","deck","stats","timerInterval","timer","UserOptions","gameManagerInstance","startGame","cardsClass","singleCardClass","startTimer","endGame","clearInterval","timerContainer","setInterval","onHandFinishedHandler","onHandInvalidHandler","onCardsAllFlippedHandler","USER_OPTIONS_WRAPPER","OPTION_PANEL_CLASS","CARD_THEME","PICTURE_NUMBER","USER_OPTION_PANEL","CLOSE","cardCopies","userOptionsPanel","drawHeader","drawOptionsForm","drawFooter","userOptionsTitle","drawCardThemeForm","cardTemeText","dogsOption","catsOption","closeButton","hide","val"],"mappings":"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","file":"memoryCardGame.min.js","sourcesContent":["window.memoryCardGame = {};","/* global $, memoryCardGame */\r\n\r\nwindow.memoryCardGame.utils = {};\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    memoryCardGame.utils.persistInLocalStorage = function (data) {\r\n        localStorage.setItem('memoryCardGame', JSON.stringify(data));\r\n    };\r\n\r\n    memoryCardGame.utils.addDataInLocalStorage = function (data) {\r\n        var persistedData = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        var mergedData = $.extend({}, persistedData, data);\r\n        memoryCardGame.utils.persistInLocalStorage(mergedData);\r\n    };\r\n\r\n    memoryCardGame.utils.retrieveFromLocalStorage = function () {\r\n        return JSON.parse(localStorage.getItem('memoryCardGame'));\r\n    };\r\n\r\n    memoryCardGame.utils.getFromLocalStorage = function (key) {\r\n        var persistedData = memoryCardGame.utils.retrieveFromLocalStorage();\r\n        if(persistedData !== null) {\r\n            return persistedData[key];\r\n        }\r\n    };\r\n})();\r\n","memoryCardGame.Deck = function (params) {\r\n\r\n    'use strict';\r\n\r\n    luga.extend(luga.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-cards',\r\n            SINGLE_CARD_CLASS: 'memory-card'\r\n        },\r\n        CARD_COPIES: 2,\r\n        TIME_FOR_FLIP: 500,\r\n        IMAGE_BASE_URL: 'src\\\\cardthemes',\r\n        EVENT: {\r\n            HAND_FINISHED: 'handFinished',\r\n            HAND_INVALID: 'handInvalid',\r\n            CARDS_ALL_FLIPPED: 'cardsAllFlipped'\r\n        },\r\n        HTML: {\r\n            DECK: '<ul></ul>'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        selectedTheme: null\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var cards = [];\r\n\r\n    var flippedCards = [];\r\n\r\n    this.container = $(CONST.HTML.DECK).addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        createCards();\r\n        shuffleCards();\r\n        drawCards();\r\n    };\r\n\r\n    var createCards = function () {\r\n\r\n        $.ajaxSetup({\r\n            async: false\r\n        });\r\n\r\n        $.getJSON('dist/themes.json', function(json) {\r\n\r\n            var selectedThemeCards = json[config.selectedTheme];\r\n            for (var i = 0; i < selectedThemeCards.length; i++) {\r\n                for (var j = 0; j < CONST.CARD_COPIES; j++) {\r\n\r\n                    var card = new memoryCardGame.Card({\r\n                        id: cards.length,\r\n                        image: CONST.IMAGE_BASE_URL + '\\\\' + selectedThemeCards[i]\r\n                    });\r\n                    card.addObserver(self);\r\n                    cards.push(card);\r\n                }\r\n            }\r\n        });\r\n\r\n        $.ajaxSetup({\r\n            async: true\r\n        });\r\n\r\n    };\r\n\r\n    var shuffleCards = function () {\r\n        cards = cards.sort(function () {\r\n            return 0.5 - Math.random();\r\n        });\r\n    };\r\n\r\n    var drawCards = function () {\r\n        for (var i = 0; i < cards.length; i++) {\r\n            self.container.append(cards[i].container);\r\n        }\r\n    };\r\n\r\n    var getPreviousFlippedCard = function () {\r\n        return flippedCards[flippedCards.length - 2];\r\n    };\r\n\r\n    var isNewHandStarted = function () {\r\n        return flippedCards.length % CONST.CARD_COPIES === 1;\r\n    };\r\n\r\n    var isHandFinished = function () {\r\n        return flippedCards.length % CONST.CARD_COPIES === 0;\r\n    };\r\n\r\n    var isAllCardsFlipped = function () {\r\n        return flippedCards.length === cards.length;\r\n    };\r\n\r\n    var setDiscoveredCards = function () {\r\n        for (var i = 1; i <= CONST.CARD_COPIES; i++) {\r\n            flippedCards[flippedCards.length - i].setDiscovered();\r\n        }\r\n    };\r\n\r\n    var coverLatestHandFlippedCards = function () {\r\n        setTimeout(function () {\r\n            for (var i = 0; i < CONST.CARD_COPIES; i++) {\r\n                flippedCards[flippedCards.length - 1].getCardNodeAndFlip();\r\n                flippedCards.pop();\r\n            }\r\n        }, CONST.TIME_FOR_FLIP);\r\n    };\r\n\r\n    this.onSelectedCardHandler = function (data) {\r\n        var card = data.card;\r\n        flippedCards.push(card);\r\n        if (isNewHandStarted()) {\r\n            return;\r\n        }\r\n        if (getPreviousFlippedCard().getImage() === card.getImage()) {\r\n            if (isHandFinished()) {\r\n                setDiscoveredCards();\r\n                self.notifyObservers(CONST.EVENT.HAND_FINISHED, {});\r\n                if (isAllCardsFlipped()) {\r\n                    self.notifyObservers(CONST.EVENT.CARDS_ALL_FLIPPED, {});\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            coverLatestHandFlippedCards();\r\n            self.notifyObservers(CONST.EVENT.HAND_INVALID, {});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n\r\n};\r\n\r\n","memoryCardGame.Card = function (params) {\r\n    'use strict';\r\n\r\n    luga.extend(luga.Notifier, this);\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-card'\r\n        },\r\n        DATA: {\r\n            CARD_ID: 'data-card-id'\r\n        },\r\n        HTML: {\r\n            CARD_NODE: '<li></li>',\r\n            IMAGE_NODE: '<img>'\r\n        },\r\n        EVENT: {\r\n            SELECTED_CARD: 'selectedCard'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        id: null,\r\n        flipped: false,\r\n        image: null\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var discovered = false;\r\n\r\n    var imageNode = $(CONST.HTML.IMAGE_NODE);\r\n\r\n    this.container = $(CONST.HTML.CARD_NODE).addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        self.container.attr(CONST.DATA.CARD_ID, config.id);\r\n        attachEvents();\r\n    };\r\n\r\n    var attachEvents = function () {\r\n        self.container.click(function () {\r\n            if (config.flipped === false) {\r\n                flip(self.container);\r\n                if (discovered === false) {\r\n                    self.notifyObservers(CONST.EVENT.SELECTED_CARD, {\r\n                        card: self\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    var flip = function (cardNode) {\r\n        config.flipped = !config.flipped;\r\n\r\n        if (config.flipped === true) {\r\n            cardNode.append(getImageNode());\r\n        }\r\n        else {\r\n            cardNode.find(imageNode).remove();\r\n        }\r\n    };\r\n\r\n    var getImageNode = function () {\r\n        imageNode.attr('src', config.image);\r\n        return imageNode;\r\n    };\r\n\r\n    this.getCardNodeAndFlip = function () {\r\n        var cardNode = $('.' + CONST.CSS.ROOT + '[' + CONST.DATA.CARD_ID + '=' + config.id + ']');\r\n        flip(cardNode);\r\n    };\r\n\r\n    this.getImage = function () {\r\n        return config.image;\r\n    };\r\n\r\n    this.setDiscovered = function () {\r\n        discovered = true;\r\n    };\r\n\r\n    init.call(this);\r\n};\r\n\r\n","memoryCardGame.Stats = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'current-stats-container',\r\n            BEST_SCORE: 'best-score',\r\n            BEST_SCORE_TEXT: 'best-score-text',\r\n            BEST_SCORE_NUMBER: 'best-score-number',\r\n            ATTEMPTS: 'attempts',\r\n            ATTEMPTS_TEXT: 'attempts-text',\r\n            ATTEMPTS_NUMBER: 'attempts-number'\r\n        },\r\n        SELECTOR: {\r\n            ATTEMPTS_NUMBER: '.attempts-number'\r\n        },\r\n        TEXT: {\r\n            ATTEMPTS: 'Attempts: ',\r\n            BEST_SCORE: 'Best score: '\r\n        }\r\n    };\r\n\r\n    var config = {};\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var attempts = 0;\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    var attemptsNumber = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_NUMBER);\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    var bestScoreNumber = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_NUMBER);\r\n\r\n    /**\r\n     * @type {jQuery}\r\n     */\r\n    this.container = $('<div></div>').addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        draw();\r\n    };\r\n\r\n    var draw = function () {\r\n\r\n        var currentMoves = $('<div></div>').addClass(CONST.CSS.ATTEMPTS);\r\n        var attemptsText = $('<span></span>').addClass(CONST.CSS.ATTEMPTS_TEXT).text(CONST.TEXT.ATTEMPTS);\r\n        attemptsNumber.text(attempts);\r\n\r\n        currentMoves.append(attemptsText);\r\n        currentMoves.append(attemptsNumber);\r\n\r\n        self.container.append(currentMoves);\r\n\r\n        var bestScoreCounter = memoryCardGame.utils.getFromLocalStorage('bestScoreCounter');\r\n\r\n        if (bestScoreCounter) {\r\n            var bestScore = $('<div></div>').addClass(CONST.CSS.BEST_SCORE);\r\n            var bestScoreText = $('<span></span>').addClass(CONST.CSS.BEST_SCORE_TEXT).text(CONST.TEXT.BEST_SCORE);\r\n            bestScoreNumber.text(bestScoreCounter);\r\n\r\n            bestScore.append(bestScoreText);\r\n            bestScore.append(bestScoreNumber);\r\n            self.container.append(bestScore);\r\n        }\r\n    };\r\n\r\n    this.updateAttemptsCounter = function () {\r\n        attempts++;\r\n        attemptsNumber.text(attempts);\r\n    };\r\n\r\n    this.saveStats = function () {\r\n        var bestScoreCounter = memoryCardGame.utils.getFromLocalStorage('bestScoreCounter');\r\n        if ((bestScoreCounter === undefined || attempts < bestScoreCounter)) {\r\n            memoryCardGame.utils.addDataInLocalStorage({bestScoreCounter: attempts});\r\n        }\r\n    };\r\n\r\n    init.call(this);\r\n};\r\n\r\n","memoryCardGame.GameManager = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            ROOT: 'memory-card-game',\r\n            BOARD_CLASS: 'memory-board',\r\n            TIMER_CLASS: 'timer'\r\n        },\r\n        SELECTOR: {\r\n            TIMER_SELECTOR: '.timer'\r\n        },\r\n        TIMER: 1000\r\n    };\r\n\r\n    var config = {\r\n        rootNode: $('body'),\r\n        cardTheme: 'dogs'\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var deck;\r\n\r\n    var stats;\r\n\r\n    var timer = 0;\r\n\r\n    var timerInterval;\r\n\r\n    this.container = $('<div></div>').addClass(CONST.CSS.ROOT);\r\n\r\n    var self = this;\r\n\r\n    var init = function () {\r\n        new memoryCardGame.UserOptions({\r\n            gameManagerInstance: self\r\n        });\r\n    };\r\n\r\n    this.startGame = function (selectedTheme) {\r\n        stats = new memoryCardGame.Stats();\r\n        self.container.append(stats.container);\r\n\r\n        deck = new memoryCardGame.Deck({\r\n            cardsClass: config.cardsClass,\r\n            singleCardClass: config.singleCardClass,\r\n            selectedTheme: selectedTheme\r\n        });\r\n        deck.addObserver(self);\r\n        self.container.append(deck.container);\r\n\r\n        startTimer();\r\n\r\n        config.rootNode.append(self.container);\r\n    };\r\n\r\n    var endGame = function () {\r\n        stats.saveStats();\r\n        clearInterval(timerInterval);\r\n    };\r\n\r\n    var startTimer = function () {\r\n        var timerContainer = $('<div></div>').addClass(CONST.CSS.TIMER_CLASS);\r\n        self.container.append(timerContainer.text(timer));\r\n        timerInterval = setInterval(function () {\r\n            timerContainer.text(++timer);\r\n        }, CONST.TIMER);\r\n    };\r\n\r\n    this.onHandFinishedHandler = function () {\r\n        stats.updateAttemptsCounter();\r\n    };\r\n\r\n    this.onHandInvalidHandler = function () {\r\n        stats.updateAttemptsCounter();\r\n    };\r\n\r\n    this.onCardsAllFlippedHandler = function () {\r\n        endGame();\r\n    };\r\n\r\n    init.call(this);\r\n};","memoryCardGame.UserOptions = function (params) {\r\n\r\n    'use strict';\r\n\r\n    var CONST = {\r\n        CSS: {\r\n            USER_OPTIONS_WRAPPER: 'user-options-wrapper',\r\n            OPTION_PANEL_CLASS: 'user-options-panel'\r\n        },\r\n        TEXT: {\r\n            CARD_THEME: 'Card theme:',\r\n            PICTURE_NUMBER: 'Number of pictures:',\r\n            USER_OPTION_PANEL: 'User option panel',\r\n            CLOSE: 'Close'\r\n        }\r\n    };\r\n\r\n    var config = {\r\n        cardCopies: null,\r\n        gameManagerInstance: null\r\n    };\r\n\r\n    // Merge incoming params with internal config\r\n    $.extend(config, params);\r\n\r\n    var self = this;\r\n\r\n    self.container = $('<div></div>').addClass(CONST.CSS.USER_OPTIONS_WRAPPER);\r\n\r\n    var init = function () {\r\n        draw();\r\n    };\r\n\r\n    var draw = function () {\r\n        //TODO: Create utils library for dom elements\r\n        var userOptionsPanel = $('<div></div>').addClass(CONST.CSS.OPTION_PANEL_CLASS);\r\n        drawHeader(userOptionsPanel);\r\n        drawOptionsForm(userOptionsPanel);\r\n        drawFooter(userOptionsPanel);\r\n        self.container.append(userOptionsPanel);\r\n        //TODO: Create a global class for memoryGame and append panel to it\r\n        $('body').append(self.container);\r\n    };\r\n\r\n    var drawHeader = function (rootNode) {\r\n        var userOptionsTitle = $('<h2></h2>').text(CONST.TEXT.USER_OPTION_PANEL);\r\n        rootNode.append(userOptionsTitle);\r\n    };\r\n\r\n    var drawOptionsForm = function (rootNode) {\r\n        drawCardThemeForm(rootNode);\r\n    };\r\n\r\n    var drawHowManyPicturesForm = function (rootNode) {\r\n        var howManyPicturesLabel = $('<label></label>').text(CONST.TEXT.PICTURE_NUMBER);\r\n        var howManyPictures = $('<input type=\"text\">');\r\n        howManyPicturesLabel.append(howManyPictures);\r\n        rootNode.append(howManyPicturesLabel);\r\n    };\r\n\r\n    var drawCardThemeForm = function (rootNode) {\r\n        var cardTemeText = $('<span></span>').text(CONST.TEXT.CARD_THEME);\r\n        rootNode.append(cardTemeText);\r\n        var dogsOption = $('<label><input name=\"theme\" value=\"dogs\" type=\"radio\">Dogs</label>');\r\n        var catsOption = $('<label><input name=\"theme\" value=\"cats\" type=\"radio\">Cats</label><br>');\r\n        rootNode.append(dogsOption);\r\n        rootNode.append(catsOption);\r\n    };\r\n\r\n    var drawFooter = function (rootNode) {\r\n        var closeButton = $('<button></button>').text(CONST.TEXT.CLOSE);\r\n        closeButton.click(function () {\r\n            self.container.hide();\r\n            var selectedTheme = $('input:radio[name=\\'theme\\']:checked').val();\r\n            config.gameManagerInstance.startGame(selectedTheme);\r\n        });\r\n        rootNode.append(closeButton);\r\n    };\r\n\r\n    init.call(this);\r\n\r\n};\r\n\r\n"],"sourceRoot":"."}